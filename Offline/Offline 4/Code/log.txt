Line 1: type_specifier : INT

int

Line 2: type_specifier : INT

int

Line 2: declaration_list : ID LTHIRD CONST_INT RTHIRD

ara[11]

Line 2: declaration_list : declaration_list COMMA ID

ara[11],i

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int ara[11],i;

Line 2: statement : var_declaration

int ara[11],i;

Line 2: statements : statement

int ara[11],i;

Line 3: type_specifier : INT

int

Line 3: declaration_list : ID

sum

Line 3: declaration_list : declaration_list COMMA ID

sum,chk

Line 3: var_declaration : type_specifier declaration_list SEMICOLON

int sum,chk;

Line 3: statement : var_declaration

int sum,chk;

Line 3: statements : statements statement

int ara[11],i;
int sum,chk;

Line 4: variable : ID

sum

Line 4: factor : CONST_INT

0

Line 4: unary_expression : factor

0

Line 4: term : unary_expression

0

Line 4: simple_expression : term

0

Line 4: rel_expression : simple_expression

0

Line 4: logic_expression : rel_expression

0

Line 4: expression : variable ASSIGNOP logic_expression

sum=0

Line 4: expression_statement : expression SEMICOLON

sum=0;

Line 4: statement : expression_statement

sum=0;

Line 4: statements : statements statement

int ara[11],i;
int sum,chk;
sum=0;

Line 5: variable : ID

chk

Line 5: factor : CONST_INT

0

Line 5: unary_expression : factor

0

Line 5: term : unary_expression

0

Line 5: simple_expression : term

0

Line 5: rel_expression : simple_expression

0

Line 5: logic_expression : rel_expression

0

Line 5: expression : variable ASSIGNOP logic_expression

chk=0

Line 5: expression_statement : expression SEMICOLON

chk=0;

Line 5: statement : expression_statement

chk=0;

Line 5: statements : statements statement

int ara[11],i;
int sum,chk;
sum=0;
chk=0;

Line 6: variable : ID

i

Line 6: factor : CONST_INT

1

Line 6: unary_expression : factor

1

Line 6: term : unary_expression

1

Line 6: simple_expression : term

1

Line 6: rel_expression : simple_expression

1

Line 6: logic_expression : rel_expression

1

Line 6: expression : variable ASSIGNOP logic_expression

i=1

Line 6: expression_statement : expression SEMICOLON

i=1;

Line 6: variable : ID

i

Line 6: factor : variable

i

Line 6: unary_expression : factor

i

Line 6: term : unary_expression

i

Line 6: simple_expression : term

i

Line 6: factor : CONST_INT

10

Line 6: unary_expression : factor

10

Line 6: term : unary_expression

10

Line 6: simple_expression : term

10

Line 6: rel_expression : simple_expression RELOP simple_expression

i<=10

Line 6: logic_expression : rel_expression

i<=10

Line 6: expression : logic_expression

i<=10

Line 6: expression_statement : expression SEMICOLON

i<=10;

Line 6: variable : ID

i

Line 6: factor : variable INCOP

i++

Line 6: unary_expression : factor

i++

Line 6: term : unary_expression

i++

Line 6: simple_expression : term

i++

Line 6: rel_expression : simple_expression

i++

Line 6: logic_expression : rel_expression

i++

Line 6: expression : logic_expression

i++

Line 8: variable : ID

i

Line 8: factor : variable

i

Line 8: unary_expression : factor

i

Line 8: term : unary_expression

i

Line 8: simple_expression : term

i

Line 8: rel_expression : simple_expression

i

Line 8: logic_expression : rel_expression

i

Line 8: expression : logic_expression

i

Line 8: variable : ID LTHIRD expression RTHIRD

ara[i]

Line 8: variable : ID

i

Line 8: factor : variable

i

Line 8: unary_expression : factor

i

Line 8: term : unary_expression

i

Line 8: simple_expression : term

i

Line 8: rel_expression : simple_expression

i

Line 8: logic_expression : rel_expression

i

Line 8: expression : variable ASSIGNOP logic_expression

ara[i]=i

Line 8: expression_statement : expression SEMICOLON

ara[i]=i;

Line 8: statement : expression_statement

ara[i]=i;

Line 8: statements : statement

ara[i]=i;

Line 9: variable : ID

sum

Line 9: variable : ID

sum

Line 9: factor : variable

sum

Line 9: unary_expression : factor

sum

Line 9: term : unary_expression

sum

Line 9: simple_expression : term

sum

Line 9: variable : ID

i

Line 9: factor : variable

i

Line 9: unary_expression : factor

i

Line 9: term : unary_expression

i

Line 9: simple_expression : simple_expression ADDOP term

sum+i

Line 9: rel_expression : simple_expression

sum+i

Line 9: logic_expression : rel_expression

sum+i

Line 9: expression : variable ASSIGNOP logic_expression

sum=sum+i

Line 9: expression_statement : expression SEMICOLON

sum=sum+i;

Line 9: statement : expression_statement

sum=sum+i;

Line 9: statements : statements statement

ara[i]=i;
sum=sum+i;

Line 10: variable : ID

chk

Line 10: variable : ID

chk

Line 10: factor : variable

chk

Line 10: unary_expression : factor

chk

Line 10: term : unary_expression

chk

Line 10: simple_expression : term

chk

Line 10: variable : ID

i

Line 10: factor : variable

i

Line 10: unary_expression : factor

i

Line 10: term : unary_expression

i

Line 10: simple_expression : term

i

Line 10: rel_expression : simple_expression

i

Line 10: logic_expression : rel_expression

i

Line 10: expression : logic_expression

i

Line 10: variable : ID LTHIRD expression RTHIRD

ara[i]

Line 10: factor : variable

ara[i]

Line 10: unary_expression : factor

ara[i]

Line 10: term : unary_expression

ara[i]

Line 10: simple_expression : simple_expression ADDOP term

chk+ara[i]

Line 10: rel_expression : simple_expression

chk+ara[i]

Line 10: logic_expression : rel_expression

chk+ara[i]

Line 10: expression : variable ASSIGNOP logic_expression

chk=chk+ara[i]

Line 10: expression_statement : expression SEMICOLON

chk=chk+ara[i];

Line 10: statement : expression_statement

chk=chk+ara[i];

Line 10: statements : statements statement

ara[i]=i;
sum=sum+i;
chk=chk+ara[i];

Line 11: compound_statement : LCURL statements RCURL

{
ara[i]=i;
sum=sum+i;
chk=chk+ara[i];
}

ScopeTable # 1.1.1

ScopeTable # 1.1
8 --> < ara , ID > 
10 --> < chk , ID > 
11 --> < sum , ID > 
15 --> < i , ID > 

ScopeTable # 1
1 --> < main , ID > 

Line 11: statement : compound_statement

{
ara[i]=i;
sum=sum+i;
chk=chk+ara[i];
}

Line 11: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(i=1;i<=10;i++){
ara[i]=i;
sum=sum+i;
chk=chk+ara[i];
}

Line 11: statements : statements statement

int ara[11],i;
int sum,chk;
sum=0;
chk=0;
for(i=1;i<=10;i++){
ara[i]=i;
sum=sum+i;
chk=chk+ara[i];
}

Line 12: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(sum);

Line 12: statements : statements statement

int ara[11],i;
int sum,chk;
sum=0;
chk=0;
for(i=1;i<=10;i++){
ara[i]=i;
sum=sum+i;
chk=chk+ara[i];
}
printf(sum);

Line 13: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(chk);

Line 13: statements : statements statement

int ara[11],i;
int sum,chk;
sum=0;
chk=0;
for(i=1;i<=10;i++){
ara[i]=i;
sum=sum+i;
chk=chk+ara[i];
}
printf(sum);
printf(chk);

Line 14: compound_statement : LCURL statements RCURL

{
int ara[11],i;
int sum,chk;
sum=0;
chk=0;
for(i=1;i<=10;i++){
ara[i]=i;
sum=sum+i;
chk=chk+ara[i];
}
printf(sum);
printf(chk);
}

ScopeTable # 1.1
8 --> < ara , ID > 
10 --> < chk , ID > 
11 --> < sum , ID > 
15 --> < i , ID > 

ScopeTable # 1
1 --> < main , ID > 

Line 14: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int ara[11],i;
int sum,chk;
sum=0;
chk=0;
for(i=1;i<=10;i++){
ara[i]=i;
sum=sum+i;
chk=chk+ara[i];
}
printf(sum);
printf(chk);
}

Line 14: unit : func_definition

int main(){
int ara[11],i;
int sum,chk;
sum=0;
chk=0;
for(i=1;i<=10;i++){
ara[i]=i;
sum=sum+i;
chk=chk+ara[i];
}
printf(sum);
printf(chk);
}

Line 14: program : unit

int main(){
int ara[11],i;
int sum,chk;
sum=0;
chk=0;
for(i=1;i<=10;i++){
ara[i]=i;
sum=sum+i;
chk=chk+ara[i];
}
printf(sum);
printf(chk);
}

Line 14: start : program

ScopeTable # 1
1 --> < main , ID > 

Total lines: 14
Total errors: 0
