Line 3: type_specifier : INT

int

Line 3: type_specifier : INT

int

Line 3: parameter_list : type_specifier ID

int n

Line 5: variable : ID

n

Line 5: factor : variable

n

Line 5: unary_expression : factor

n

Line 5: term : unary_expression

n

Line 5: simple_expression : term

n

Line 5: factor : CONST_INT

1

Line 5: unary_expression : factor

1

Line 5: term : unary_expression

1

Line 5: simple_expression : term

1

Line 5: rel_expression : simple_expression RELOP simple_expression

n<=1

Line 5: logic_expression : rel_expression

n<=1

Line 5: expression : logic_expression

n<=1

Line 6: variable : ID

n

Line 6: factor : variable

n

Line 6: unary_expression : factor

n

Line 6: term : unary_expression

n

Line 6: simple_expression : term

n

Line 6: rel_expression : simple_expression

n

Line 6: logic_expression : rel_expression

n

Line 6: expression : logic_expression

n

Line 6: statement : RETURN expression SEMICOLON

return n;

Line 7: statement : IF LPAREN expression RPAREN statement

if(n<=1)return n;

Line 7: statements : statement

if(n<=1)return n;

Line 7: variable : ID

n

Line 7: factor : variable

n

Line 7: unary_expression : factor

n

Line 7: term : unary_expression

n

Line 7: simple_expression : term

n

Line 7: factor : CONST_INT

1

Line 7: unary_expression : factor

1

Line 7: term : unary_expression

1

Line 7: simple_expression : simple_expression ADDOP term

n-1

Line 7: rel_expression : simple_expression

n-1

Line 7: logic_expression : rel_expression

n-1

Line 7: arguments : logic_expression

n-1

Line 7: argument_list : arguments

n-1

Line 7: factor : ID LPAREN argument_list RPAREN

fib(n-1)

Line 7: unary_expression : factor

fib(n-1)

Line 7: term : unary_expression

fib(n-1)

Line 7: simple_expression : term

fib(n-1)

Line 7: variable : ID

n

Line 7: factor : variable

n

Line 7: unary_expression : factor

n

Line 7: term : unary_expression

n

Line 7: simple_expression : term

n

Line 7: factor : CONST_INT

2

Line 7: unary_expression : factor

2

Line 7: term : unary_expression

2

Line 7: simple_expression : simple_expression ADDOP term

n-2

Line 7: rel_expression : simple_expression

n-2

Line 7: logic_expression : rel_expression

n-2

Line 7: arguments : logic_expression

n-2

Line 7: argument_list : arguments

n-2

Line 7: factor : ID LPAREN argument_list RPAREN

fib(n-2)

Line 7: unary_expression : factor

fib(n-2)

Line 7: term : unary_expression

fib(n-2)

Line 7: simple_expression : simple_expression ADDOP term

fib(n-1)+fib(n-2)

Line 7: rel_expression : simple_expression

fib(n-1)+fib(n-2)

Line 7: logic_expression : rel_expression

fib(n-1)+fib(n-2)

Line 7: expression : logic_expression

fib(n-1)+fib(n-2)

Line 7: statement : RETURN expression SEMICOLON

return fib(n-1)+fib(n-2);

Line 7: statements : statements statement

if(n<=1)return n;
return fib(n-1)+fib(n-2);

Line 8: compound_statement : LCURL statements RCURL

{
if(n<=1)return n;
return fib(n-1)+fib(n-2);
}

ScopeTable # 1.1
20 --> < n , ID > 

ScopeTable # 1
5 --> < fib , ID > 

Line 8: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int fib(int n){
if(n<=1)return n;
return fib(n-1)+fib(n-2);
}

Line 8: unit : func_definition

int fib(int n){
if(n<=1)return n;
return fib(n-1)+fib(n-2);
}

Line 8: program : unit

int fib(int n){
if(n<=1)return n;
return fib(n-1)+fib(n-2);
}

Line 10: type_specifier : INT

int

Line 12: type_specifier : INT

int

Line 12: declaration_list : ID

n

Line 12: var_declaration : type_specifier declaration_list SEMICOLON

int n;

Line 12: statement : var_declaration

int n;

Line 12: statements : statement

int n;

Line 13: variable : ID

n

Line 13: factor : CONST_INT

5

Line 13: unary_expression : factor

5

Line 13: term : unary_expression

5

Line 13: simple_expression : term

5

Line 13: rel_expression : simple_expression

5

Line 13: logic_expression : rel_expression

5

Line 13: expression : variable ASSIGNOP logic_expression

n=5

Line 13: expression_statement : expression SEMICOLON

n=5;

Line 13: statement : expression_statement

n=5;

Line 13: statements : statements statement

int n;
n=5;

Line 14: type_specifier : INT

int

Line 14: declaration_list : ID

s

Line 14: var_declaration : type_specifier declaration_list SEMICOLON

int s;

Line 14: statement : var_declaration

int s;

Line 14: statements : statements statement

int n;
n=5;
int s;

Line 15: variable : ID

s

Line 15: variable : ID

n

Line 15: factor : variable

n

Line 15: unary_expression : factor

n

Line 15: term : unary_expression

n

Line 15: simple_expression : term

n

Line 15: rel_expression : simple_expression

n

Line 15: logic_expression : rel_expression

n

Line 15: arguments : logic_expression

n

Line 15: argument_list : arguments

n

Line 15: factor : ID LPAREN argument_list RPAREN

fib(n)

Line 15: unary_expression : factor

fib(n)

Line 15: term : unary_expression

fib(n)

Line 15: simple_expression : term

fib(n)

Line 15: rel_expression : simple_expression

fib(n)

Line 15: logic_expression : rel_expression

fib(n)

Line 15: expression : variable ASSIGNOP logic_expression

s=fib(n)

Line 15: expression_statement : expression SEMICOLON

s=fib(n);

Line 15: statement : expression_statement

s=fib(n);

Line 15: statements : statements statement

int n;
n=5;
int s;
s=fib(n);

Line 16: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(s);

Line 16: statements : statements statement

int n;
n=5;
int s;
s=fib(n);
printf(s);

Line 17: factor : CONST_INT

0

Line 17: unary_expression : factor

0

Line 17: term : unary_expression

0

Line 17: simple_expression : term

0

Line 17: rel_expression : simple_expression

0

Line 17: logic_expression : rel_expression

0

Line 17: expression : logic_expression

0

Line 17: statement : RETURN expression SEMICOLON

return 0;

Line 17: statements : statements statement

int n;
n=5;
int s;
s=fib(n);
printf(s);
return 0;

Line 18: compound_statement : LCURL statements RCURL

{
int n;
n=5;
int s;
s=fib(n);
printf(s);
return 0;
}

ScopeTable # 1.2
20 --> < n , ID > 
25 --> < s , ID > 

ScopeTable # 1
1 --> < main , ID > 
5 --> < fib , ID > 

Line 18: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int n;
n=5;
int s;
s=fib(n);
printf(s);
return 0;
}

Line 18: unit : func_definition

int main(){
int n;
n=5;
int s;
s=fib(n);
printf(s);
return 0;
}

Line 18: program : program unit

int fib(int n){
if(n<=1)return n;
return fib(n-1)+fib(n-2);
}
int main(){
int n;
n=5;
int s;
s=fib(n);
printf(s);
return 0;
}

Line 18: start : program

ScopeTable # 1
1 --> < main , ID > 
5 --> < fib , ID > 

Total lines: 18
Total errors: 0
