Line 1: type_specifier : INT

int

Line 1: declaration_list : ID

x_global

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int x_global;

Line 1: unit : var_declaration

int x_global;

Line 1: program : unit

int x_global;

Line 2: type_specifier : INT

int

Line 2: declaration_list : ID LTHIRD CONST_INT RTHIRD

ara[10]

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int ara[10];

Line 2: unit : var_declaration

int ara[10];

Line 2: program : program unit

int x_global;
int ara[10];

Line 4: type_specifier : INT

int

Line 6: type_specifier : INT

int

Line 6: declaration_list : ID

x

Line 6: declaration_list : declaration_list COMMA ID

x,y

Line 6: declaration_list : declaration_list COMMA ID

x,y,z

Line 6: var_declaration : type_specifier declaration_list SEMICOLON

int x,y,z;

Line 6: statement : var_declaration

int x,y,z;

Line 6: statements : statement

int x,y,z;

Line 7: variable : ID

x

Line 7: factor : CONST_INT

31

Line 7: unary_expression : factor

31

Line 7: term : unary_expression

31

Line 7: simple_expression : term

31

Line 7: rel_expression : simple_expression

31

Line 7: logic_expression : rel_expression

31

Line 7: expression : variable ASSIGNOP logic_expression

x=31

Line 7: expression_statement : expression SEMICOLON

x=31;

Line 7: statement : expression_statement

x=31;

Line 7: statements : statements statement

int x,y,z;
x=31;

Line 8: variable : ID

y

Line 8: factor : CONST_INT

55

Line 8: unary_expression : factor

55

Line 8: term : unary_expression

55

Line 8: simple_expression : term

55

Line 8: rel_expression : simple_expression

55

Line 8: logic_expression : rel_expression

55

Line 8: expression : variable ASSIGNOP logic_expression

y=55

Line 8: expression_statement : expression SEMICOLON

y=55;

Line 8: statement : expression_statement

y=55;

Line 8: statements : statements statement

int x,y,z;
x=31;
y=55;

Line 9: variable : ID

x_global

Line 9: factor : CONST_INT

3

Line 9: unary_expression : factor

3

Line 9: term : unary_expression

3

Line 9: simple_expression : term

3

Line 9: rel_expression : simple_expression

3

Line 9: logic_expression : rel_expression

3

Line 9: expression : variable ASSIGNOP logic_expression

x_global=3

Line 9: expression_statement : expression SEMICOLON

x_global=3;

Line 9: statement : expression_statement

x_global=3;

Line 9: statements : statements statement

int x,y,z;
x=31;
y=55;
x_global=3;

Line 10: factor : CONST_INT

2

Line 10: unary_expression : factor

2

Line 10: term : unary_expression

2

Line 10: simple_expression : term

2

Line 10: rel_expression : simple_expression

2

Line 10: logic_expression : rel_expression

2

Line 10: expression : logic_expression

2

Line 10: variable : ID LTHIRD expression RTHIRD

ara[2]

Line 10: factor : CONST_INT

12

Line 10: unary_expression : factor

12

Line 10: term : unary_expression

12

Line 10: simple_expression : term

12

Line 10: rel_expression : simple_expression

12

Line 10: logic_expression : rel_expression

12

Line 10: expression : variable ASSIGNOP logic_expression

ara[2]=12

Line 10: expression_statement : expression SEMICOLON

ara[2]=12;

Line 10: statement : expression_statement

ara[2]=12;

Line 10: statements : statements statement

int x,y,z;
x=31;
y=55;
x_global=3;
ara[2]=12;

Line 12: variable : ID

x_global

Line 12: factor : variable

x_global

Line 12: unary_expression : factor

x_global

Line 12: term : unary_expression

x_global

Line 12: simple_expression : term

x_global

Line 12: factor : CONST_INT

2

Line 12: unary_expression : factor

2

Line 12: term : unary_expression

2

Line 12: simple_expression : term

2

Line 12: rel_expression : simple_expression

2

Line 12: logic_expression : rel_expression

2

Line 12: expression : logic_expression

2

Line 12: variable : ID LTHIRD expression RTHIRD

ara[2]

Line 12: factor : variable

ara[2]

Line 12: unary_expression : factor

ara[2]

Line 12: term : unary_expression

ara[2]

Line 12: simple_expression : term

ara[2]

Line 12: rel_expression : simple_expression RELOP simple_expression

x_global>ara[2]

Line 12: logic_expression : rel_expression

x_global>ara[2]

Line 12: expression : logic_expression

x_global>ara[2]

Line 14: variable : ID

x_global

Line 14: variable : ID

x_global

Line 14: factor : variable

x_global

Line 14: unary_expression : factor

x_global

Line 14: term : unary_expression

x_global

Line 14: simple_expression : term

x_global

Line 14: factor : CONST_INT

1

Line 14: unary_expression : factor

1

Line 14: term : unary_expression

1

Line 14: simple_expression : simple_expression ADDOP term

x_global-1

Line 14: rel_expression : simple_expression

x_global-1

Line 14: logic_expression : rel_expression

x_global-1

Line 14: expression : variable ASSIGNOP logic_expression

x_global=x_global-1

Line 14: expression_statement : expression SEMICOLON

x_global=x_global-1;

Line 14: statement : expression_statement

x_global=x_global-1;

Line 14: statements : statement

x_global=x_global-1;

Line 15: compound_statement : LCURL statements RCURL

{
x_global=x_global-1;
}

ScopeTable # 1.1.1

ScopeTable # 1.1
0 --> < x , ID > 
1 --> < y , ID > 
2 --> < z , ID > 

ScopeTable # 1
0 --> < x_global , ID > 
1 --> < main , ID > 
8 --> < ara , ID > 

Line 15: statement : compound_statement

{
x_global=x_global-1;
}

Line 18: factor : CONST_INT

2

Line 18: unary_expression : factor

2

Line 18: term : unary_expression

2

Line 18: simple_expression : term

2

Line 18: rel_expression : simple_expression

2

Line 18: logic_expression : rel_expression

2

Line 18: expression : logic_expression

2

Line 18: variable : ID LTHIRD expression RTHIRD

ara[2]

Line 18: factor : CONST_INT

2

Line 18: unary_expression : factor

2

Line 18: term : unary_expression

2

Line 18: simple_expression : term

2

Line 18: rel_expression : simple_expression

2

Line 18: logic_expression : rel_expression

2

Line 18: expression : logic_expression

2

Line 18: variable : ID LTHIRD expression RTHIRD

ara[2]

Line 18: factor : variable

ara[2]

Line 18: unary_expression : factor

ara[2]

Line 18: term : unary_expression

ara[2]

Line 18: simple_expression : term

ara[2]

Line 18: factor : CONST_INT

1

Line 18: unary_expression : factor

1

Line 18: term : unary_expression

1

Line 18: simple_expression : simple_expression ADDOP term

ara[2]-1

Line 18: rel_expression : simple_expression

ara[2]-1

Line 18: logic_expression : rel_expression

ara[2]-1

Line 18: expression : variable ASSIGNOP logic_expression

ara[2]=ara[2]-1

Line 18: expression_statement : expression SEMICOLON

ara[2]=ara[2]-1;

Line 18: statement : expression_statement

ara[2]=ara[2]-1;

Line 18: statements : statement

ara[2]=ara[2]-1;

Line 19: compound_statement : LCURL statements RCURL

{
ara[2]=ara[2]-1;
}

ScopeTable # 1.1.2

ScopeTable # 1.1
0 --> < x , ID > 
1 --> < y , ID > 
2 --> < z , ID > 

ScopeTable # 1
0 --> < x_global , ID > 
1 --> < main , ID > 
8 --> < ara , ID > 

Line 19: statement : compound_statement

{
ara[2]=ara[2]-1;
}

Line 19: statement : IF LPAREN expression RPAREN statement ELSE statement

if(x_global>ara[2]){
x_global=x_global-1;
}
else {
ara[2]=ara[2]-1;
}

Line 19: statements : statements statement

int x,y,z;
x=31;
y=55;
x_global=3;
ara[2]=12;
if(x_global>ara[2]){
x_global=x_global-1;
}
else {
ara[2]=ara[2]-1;
}

Line 21: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(x_global);

Line 21: statements : statements statement

int x,y,z;
x=31;
y=55;
x_global=3;
ara[2]=12;
if(x_global>ara[2]){
x_global=x_global-1;
}
else {
ara[2]=ara[2]-1;
}
printf(x_global);

Line 22: factor : CONST_INT

2

Line 22: unary_expression : factor

2

Line 22: term : unary_expression

2

Line 22: simple_expression : term

2

Line 22: rel_expression : simple_expression

2

Line 22: logic_expression : rel_expression

2

Line 22: expression : logic_expression

2

Line 22: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(ara[2]);

Line 22: statements : statements statement

int x,y,z;
x=31;
y=55;
x_global=3;
ara[2]=12;
if(x_global>ara[2]){
x_global=x_global-1;
}
else {
ara[2]=ara[2]-1;
}
printf(x_global);
printf(ara[2]);

Line 24: factor : CONST_INT

0

Line 24: unary_expression : factor

0

Line 24: term : unary_expression

0

Line 24: simple_expression : term

0

Line 24: rel_expression : simple_expression

0

Line 24: logic_expression : rel_expression

0

Line 24: expression : logic_expression

0

Line 24: statement : RETURN expression SEMICOLON

return 0;

Line 24: statements : statements statement

int x,y,z;
x=31;
y=55;
x_global=3;
ara[2]=12;
if(x_global>ara[2]){
x_global=x_global-1;
}
else {
ara[2]=ara[2]-1;
}
printf(x_global);
printf(ara[2]);
return 0;

Line 25: compound_statement : LCURL statements RCURL

{
int x,y,z;
x=31;
y=55;
x_global=3;
ara[2]=12;
if(x_global>ara[2]){
x_global=x_global-1;
}
else {
ara[2]=ara[2]-1;
}
printf(x_global);
printf(ara[2]);
return 0;
}

ScopeTable # 1.1
0 --> < x , ID > 
1 --> < y , ID > 
2 --> < z , ID > 

ScopeTable # 1
0 --> < x_global , ID > 
1 --> < main , ID > 
8 --> < ara , ID > 

Line 25: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int x,y,z;
x=31;
y=55;
x_global=3;
ara[2]=12;
if(x_global>ara[2]){
x_global=x_global-1;
}
else {
ara[2]=ara[2]-1;
}
printf(x_global);
printf(ara[2]);
return 0;
}

Line 25: unit : func_definition

int main(){
int x,y,z;
x=31;
y=55;
x_global=3;
ara[2]=12;
if(x_global>ara[2]){
x_global=x_global-1;
}
else {
ara[2]=ara[2]-1;
}
printf(x_global);
printf(ara[2]);
return 0;
}

Line 25: program : program unit

int x_global;
int ara[10];
int main(){
int x,y,z;
x=31;
y=55;
x_global=3;
ara[2]=12;
if(x_global>ara[2]){
x_global=x_global-1;
}
else {
ara[2]=ara[2]-1;
}
printf(x_global);
printf(ara[2]);
return 0;
}

Line 25: start : program

ScopeTable # 1
0 --> < x_global , ID > 
1 --> < main , ID > 
8 --> < ara , ID > 

Total lines: 25
Total errors: 0
