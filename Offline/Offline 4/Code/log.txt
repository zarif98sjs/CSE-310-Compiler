Line 1: type_specifier : INT

int

Line 1: declaration_list : ID

x_global

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int x_global;

Line 1: unit : var_declaration

int x_global;

Line 1: program : unit

int x_global;

Line 2: type_specifier : INT

int

Line 2: declaration_list : ID LTHIRD CONST_INT RTHIRD

ara[10]

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int ara[10];

Line 2: unit : var_declaration

int ara[10];

Line 2: program : program unit

int x_global;
int ara[10];

Line 4: type_specifier : INT

int

Line 6: type_specifier : INT

int

Line 6: declaration_list : ID

x

Line 6: declaration_list : declaration_list COMMA ID

x,y

Line 6: var_declaration : type_specifier declaration_list SEMICOLON

int x,y;

Line 6: statement : var_declaration

int x,y;

Line 6: statements : statement

int x,y;

Line 7: variable : ID

x

Line 7: factor : CONST_INT

12

Line 7: unary_expression : factor

12

Line 7: term : unary_expression

12

Line 7: simple_expression : term

12

Line 7: rel_expression : simple_expression

12

Line 7: logic_expression : rel_expression

12

Line 7: expression : variable ASSIGNOP logic_expression

x=12

Line 7: expression_statement : expression SEMICOLON

x=12;

Line 7: statement : expression_statement

x=12;

Line 7: statements : statements statement

int x,y;
x=12;

Line 8: variable : ID

y

Line 8: factor : CONST_INT

13

Line 8: unary_expression : factor

13

Line 8: term : unary_expression

13

Line 8: simple_expression : term

13

Line 8: rel_expression : simple_expression

13

Line 8: logic_expression : rel_expression

13

Line 8: expression : variable ASSIGNOP logic_expression

y=13

Line 8: expression_statement : expression SEMICOLON

y=13;

Line 8: statement : expression_statement

y=13;

Line 8: statements : statements statement

int x,y;
x=12;
y=13;

Line 9: type_specifier : INT

int

Line 9: declaration_list : ID

z

Line 9: var_declaration : type_specifier declaration_list SEMICOLON

int z;

Line 9: statement : var_declaration

int z;

Line 9: statements : statements statement

int x,y;
x=12;
y=13;
int z;

Line 10: factor : CONST_INT

2

Line 10: unary_expression : factor

2

Line 10: term : unary_expression

2

Line 10: simple_expression : term

2

Line 10: rel_expression : simple_expression

2

Line 10: logic_expression : rel_expression

2

Line 10: expression : logic_expression

2

Line 10: variable : ID LTHIRD expression RTHIRD

ara[2]

Line 10: factor : CONST_INT

7

Line 10: unary_expression : factor

7

Line 10: term : unary_expression

7

Line 10: simple_expression : term

7

Line 10: rel_expression : simple_expression

7

Line 10: logic_expression : rel_expression

7

Line 10: expression : variable ASSIGNOP logic_expression

ara[2]=7

Line 10: expression_statement : expression SEMICOLON

ara[2]=7;

Line 10: statement : expression_statement

ara[2]=7;

Line 10: statements : statements statement

int x,y;
x=12;
y=13;
int z;
ara[2]=7;

Line 11: variable : ID

x_global

Line 11: variable : ID

x

Line 11: factor : variable

x

Line 11: unary_expression : factor

x

Line 11: term : unary_expression

x

Line 11: simple_expression : term

x

Line 11: factor : CONST_INT

2

Line 11: unary_expression : factor

2

Line 11: term : unary_expression

2

Line 11: simple_expression : term

2

Line 11: rel_expression : simple_expression

2

Line 11: logic_expression : rel_expression

2

Line 11: expression : logic_expression

2

Line 11: variable : ID LTHIRD expression RTHIRD

ara[2]

Line 11: factor : variable

ara[2]

Line 11: unary_expression : factor

ara[2]

Line 11: term : unary_expression

ara[2]

Line 11: simple_expression : simple_expression ADDOP term

x+ara[2]

Line 11: variable : ID

y

Line 11: factor : variable

y

Line 11: unary_expression : factor

y

Line 11: term : unary_expression

y

Line 11: simple_expression : simple_expression ADDOP term

x+ara[2]+y

Line 11: factor : CONST_INT

2

Line 11: unary_expression : factor

2

Line 11: term : unary_expression

2

Line 11: simple_expression : term

2

Line 11: rel_expression : simple_expression

2

Line 11: logic_expression : rel_expression

2

Line 11: expression : logic_expression

2

Line 11: variable : ID LTHIRD expression RTHIRD

ara[2]

Line 11: factor : variable

ara[2]

Line 11: unary_expression : factor

ara[2]

Line 11: term : unary_expression

ara[2]

Line 11: simple_expression : simple_expression ADDOP term

x+ara[2]+y+ara[2]

Line 11: rel_expression : simple_expression

x+ara[2]+y+ara[2]

Line 11: logic_expression : rel_expression

x+ara[2]+y+ara[2]

Line 11: expression : variable ASSIGNOP logic_expression

x_global=x+ara[2]+y+ara[2]

Line 11: expression_statement : expression SEMICOLON

x_global=x+ara[2]+y+ara[2];

Line 11: statement : expression_statement

x_global=x+ara[2]+y+ara[2];

Line 11: statements : statements statement

int x,y;
x=12;
y=13;
int z;
ara[2]=7;
x_global=x+ara[2]+y+ara[2];

Line 12: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(x_global);

Line 12: statements : statements statement

int x,y;
x=12;
y=13;
int z;
ara[2]=7;
x_global=x+ara[2]+y+ara[2];
printf(x_global);

Line 13: factor : CONST_INT

3

Line 13: unary_expression : factor

3

Line 13: term : unary_expression

3

Line 13: simple_expression : term

3

Line 13: rel_expression : simple_expression

3

Line 13: logic_expression : rel_expression

3

Line 13: expression : logic_expression

3

Line 13: variable : ID LTHIRD expression RTHIRD

ara[3]

Line 13: factor : CONST_INT

12

Line 13: unary_expression : factor

12

Line 13: term : unary_expression

12

Line 13: simple_expression : term

12

Line 13: factor : CONST_INT

2

Line 13: unary_expression : factor

2

Line 13: term : unary_expression

2

Line 13: simple_expression : simple_expression ADDOP term

12+2

Line 13: rel_expression : simple_expression

12+2

Line 13: logic_expression : rel_expression

12+2

Line 13: expression : variable ASSIGNOP logic_expression

ara[3]=12+2

Line 13: expression_statement : expression SEMICOLON

ara[3]=12+2;

Line 13: statement : expression_statement

ara[3]=12+2;

Line 13: statements : statements statement

int x,y;
x=12;
y=13;
int z;
ara[2]=7;
x_global=x+ara[2]+y+ara[2];
printf(x_global);
ara[3]=12+2;

Line 14: factor : CONST_INT

3

Line 14: unary_expression : factor

3

Line 14: term : unary_expression

3

Line 14: simple_expression : term

3

Line 14: rel_expression : simple_expression

3

Line 14: logic_expression : rel_expression

3

Line 14: expression : logic_expression

3

Line 14: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(ara[3]);

Line 14: statements : statements statement

int x,y;
x=12;
y=13;
int z;
ara[2]=7;
x_global=x+ara[2]+y+ara[2];
printf(x_global);
ara[3]=12+2;
printf(ara[3]);

Line 17: factor : CONST_INT

0

Line 17: unary_expression : factor

0

Line 17: term : unary_expression

0

Line 17: simple_expression : term

0

Line 17: rel_expression : simple_expression

0

Line 17: logic_expression : rel_expression

0

Line 17: expression : logic_expression

0

Line 17: statement : RETURN expression SEMICOLON

return 0;

Line 17: statements : statements statement

int x,y;
x=12;
y=13;
int z;
ara[2]=7;
x_global=x+ara[2]+y+ara[2];
printf(x_global);
ara[3]=12+2;
printf(ara[3]);
return 0;

Line 18: compound_statement : LCURL statements RCURL

{
int x,y;
x=12;
y=13;
int z;
ara[2]=7;
x_global=x+ara[2]+y+ara[2];
printf(x_global);
ara[3]=12+2;
printf(ara[3]);
return 0;
}

ScopeTable # 1.1
0 --> < x , ID > 
1 --> < y , ID > 
2 --> < z , ID > 

ScopeTable # 1
0 --> < x_global , ID > 
1 --> < main , ID > 
8 --> < ara , ID > 

Line 18: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int x,y;
x=12;
y=13;
int z;
ara[2]=7;
x_global=x+ara[2]+y+ara[2];
printf(x_global);
ara[3]=12+2;
printf(ara[3]);
return 0;
}

Line 18: unit : func_definition

int main(){
int x,y;
x=12;
y=13;
int z;
ara[2]=7;
x_global=x+ara[2]+y+ara[2];
printf(x_global);
ara[3]=12+2;
printf(ara[3]);
return 0;
}

Line 18: program : program unit

int x_global;
int ara[10];
int main(){
int x,y;
x=12;
y=13;
int z;
ara[2]=7;
x_global=x+ara[2]+y+ara[2];
printf(x_global);
ara[3]=12+2;
printf(ara[3]);
return 0;
}

Line 18: start : program

ScopeTable # 1
0 --> < x_global , ID > 
1 --> < main , ID > 
8 --> < ara , ID > 

Total lines: 18
Total errors: 0
