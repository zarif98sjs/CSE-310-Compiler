Line 1: type_specifier : INT

int

Line 1: declaration_list : ID

x

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int x;

Line 1: unit : var_declaration

int x;

Line 1: program : unit

int x;

Line 2: type_specifier : INT

int

Line 2: type_specifier : INT

int

Line 2: parameter_list : type_specifier ID

int n

Line 4: variable : ID

n

Line 4: factor : variable

n

Line 4: unary_expression : factor

n

Line 4: term : unary_expression

n

Line 4: simple_expression : term

n

Line 4: factor : CONST_INT

1

Line 4: unary_expression : factor

1

Line 4: term : unary_expression

1

Line 4: simple_expression : term

1

Line 4: rel_expression : simple_expression RELOP simple_expression

n<=1

Line 4: logic_expression : rel_expression

n<=1

Line 4: expression : logic_expression

n<=1

Line 5: variable : ID

n

Line 5: factor : variable

n

Line 5: unary_expression : factor

n

Line 5: term : unary_expression

n

Line 5: simple_expression : term

n

Line 5: rel_expression : simple_expression

n

Line 5: logic_expression : rel_expression

n

Line 5: expression : logic_expression

n

Line 5: statement : RETURN expression SEMICOLON

return n;

Line 6: statement : IF LPAREN expression RPAREN statement

if(n<=1)return n;

Line 6: statements : statement

if(n<=1)return n;

Line 6: variable : ID

n

Line 6: factor : variable

n

Line 6: unary_expression : factor

n

Line 6: term : unary_expression

n

Line 6: simple_expression : term

n

Line 6: factor : CONST_INT

1

Line 6: unary_expression : factor

1

Line 6: term : unary_expression

1

Line 6: simple_expression : simple_expression ADDOP term

n-1

Line 6: rel_expression : simple_expression

n-1

Line 6: logic_expression : rel_expression

n-1

Line 6: arguments : logic_expression

n-1

Line 6: argument_list : arguments

n-1

Line 6: factor : ID LPAREN argument_list RPAREN

fib(n-1)

Line 6: unary_expression : factor

fib(n-1)

Line 6: term : unary_expression

fib(n-1)

Line 6: simple_expression : term

fib(n-1)

Line 6: variable : ID

n

Line 6: factor : variable

n

Line 6: unary_expression : factor

n

Line 6: term : unary_expression

n

Line 6: simple_expression : term

n

Line 6: factor : CONST_INT

2

Line 6: unary_expression : factor

2

Line 6: term : unary_expression

2

Line 6: simple_expression : simple_expression ADDOP term

n-2

Line 6: rel_expression : simple_expression

n-2

Line 6: logic_expression : rel_expression

n-2

Line 6: arguments : logic_expression

n-2

Line 6: argument_list : arguments

n-2

Line 6: factor : ID LPAREN argument_list RPAREN

fib(n-2)

Line 6: unary_expression : factor

fib(n-2)

Line 6: term : unary_expression

fib(n-2)

Line 6: simple_expression : simple_expression ADDOP term

fib(n-1)+fib(n-2)

Line 6: rel_expression : simple_expression

fib(n-1)+fib(n-2)

Line 6: logic_expression : rel_expression

fib(n-1)+fib(n-2)

Line 6: expression : logic_expression

fib(n-1)+fib(n-2)

Line 6: statement : RETURN expression SEMICOLON

return fib(n-1)+fib(n-2);

Line 6: statements : statements statement

if(n<=1)return n;
return fib(n-1)+fib(n-2);

Line 7: compound_statement : LCURL statements RCURL

{
if(n<=1)return n;
return fib(n-1)+fib(n-2);
}

ScopeTable # 1.1
20 --> < n , ID > 

ScopeTable # 1
0 --> < x , ID > 
5 --> < fib , ID > 

Line 7: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int fib(int n){
if(n<=1)return n;
return fib(n-1)+fib(n-2);
}

Line 7: unit : func_definition

int fib(int n){
if(n<=1)return n;
return fib(n-1)+fib(n-2);
}

Line 7: program : program unit

int x;
int fib(int n){
if(n<=1)return n;
return fib(n-1)+fib(n-2);
}

Line 9: type_specifier : INT

int

Line 11: type_specifier : INT

int

Line 11: declaration_list : ID

n

Line 11: var_declaration : type_specifier declaration_list SEMICOLON

int n;

Line 11: statement : var_declaration

int n;

Line 11: statements : statement

int n;

Line 12: variable : ID

n

Line 12: factor : CONST_INT

4

Line 12: unary_expression : factor

4

Line 12: term : unary_expression

4

Line 12: simple_expression : term

4

Line 12: rel_expression : simple_expression

4

Line 12: logic_expression : rel_expression

4

Line 12: expression : variable ASSIGNOP logic_expression

n=4

Line 12: expression_statement : expression SEMICOLON

n=4;

Line 12: statement : expression_statement

n=4;

Line 12: statements : statements statement

int n;
n=4;

Line 13: type_specifier : INT

int

Line 13: declaration_list : ID

s

Line 13: var_declaration : type_specifier declaration_list SEMICOLON

int s;

Line 13: statement : var_declaration

int s;

Line 13: statements : statements statement

int n;
n=4;
int s;

Line 14: variable : ID

s

Line 14: variable : ID

n

Line 14: factor : variable

n

Line 14: unary_expression : factor

n

Line 14: term : unary_expression

n

Line 14: simple_expression : term

n

Line 14: rel_expression : simple_expression

n

Line 14: logic_expression : rel_expression

n

Line 14: arguments : logic_expression

n

Line 14: argument_list : arguments

n

Line 14: factor : ID LPAREN argument_list RPAREN

fib(n)

Line 14: unary_expression : factor

fib(n)

Line 14: term : unary_expression

fib(n)

Line 14: simple_expression : term

fib(n)

Line 14: rel_expression : simple_expression

fib(n)

Line 14: logic_expression : rel_expression

fib(n)

Line 14: expression : variable ASSIGNOP logic_expression

s=fib(n)

Line 14: expression_statement : expression SEMICOLON

s=fib(n);

Line 14: statement : expression_statement

s=fib(n);

Line 14: statements : statements statement

int n;
n=4;
int s;
s=fib(n);

Line 15: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(s);

Line 15: statements : statements statement

int n;
n=4;
int s;
s=fib(n);
printf(s);

Line 16: factor : CONST_INT

0

Line 16: unary_expression : factor

0

Line 16: term : unary_expression

0

Line 16: simple_expression : term

0

Line 16: rel_expression : simple_expression

0

Line 16: logic_expression : rel_expression

0

Line 16: expression : logic_expression

0

Line 16: statement : RETURN expression SEMICOLON

return 0;

Line 16: statements : statements statement

int n;
n=4;
int s;
s=fib(n);
printf(s);
return 0;

Line 17: compound_statement : LCURL statements RCURL

{
int n;
n=4;
int s;
s=fib(n);
printf(s);
return 0;
}

ScopeTable # 1.2
20 --> < n , ID > 
25 --> < s , ID > 

ScopeTable # 1
0 --> < x , ID > 
1 --> < main , ID > 
5 --> < fib , ID > 

Line 17: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int n;
n=4;
int s;
s=fib(n);
printf(s);
return 0;
}

Line 17: unit : func_definition

int main(){
int n;
n=4;
int s;
s=fib(n);
printf(s);
return 0;
}

Line 17: program : program unit

int x;
int fib(int n){
if(n<=1)return n;
return fib(n-1)+fib(n-2);
}
int main(){
int n;
n=4;
int s;
s=fib(n);
printf(s);
return 0;
}

Line 17: start : program

ScopeTable # 1
0 --> < x , ID > 
1 --> < main , ID > 
5 --> < fib , ID > 

Total lines: 17
Total errors: 0
