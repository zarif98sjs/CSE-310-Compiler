Line 1: type_specifier : INT

int

Line 1: type_specifier : INT

int

Line 1: parameter_list : type_specifier ID

int a

Line 1: type_specifier : INT

int

Line 1: parameter_list : parameter_list COMMA type_specifier ID

int a,int b

Line 3: variable : ID

a

Line 3: factor : variable

a

Line 3: unary_expression : factor

a

Line 3: term : unary_expression

a

Line 3: simple_expression : term

a

Line 3: variable : ID

b

Line 3: factor : variable

b

Line 3: unary_expression : factor

b

Line 3: term : unary_expression

b

Line 3: simple_expression : simple_expression ADDOP term

a+b

Line 3: rel_expression : simple_expression

a+b

Line 3: logic_expression : rel_expression

a+b

Line 3: expression : logic_expression

a+b

Line 3: statement : RETURN expression SEMICOLON

return a+b;

Line 3: statements : statement

return a+b;

Line 4: compound_statement : LCURL statements RCURL

{
return a+b;
}

ScopeTable # 1.1
7 --> < a , ID > 
8 --> < b , ID > 

ScopeTable # 1
5 --> < sum_1 , ID > 

Line 4: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int sum_1(int a,int b){
return a+b;
}

Line 4: unit : func_definition

int sum_1(int a,int b){
return a+b;
}

Line 4: program : unit

int sum_1(int a,int b){
return a+b;
}

Line 6: type_specifier : INT

int

Line 7: type_specifier : INT

int

Line 7: declaration_list : ID

x

Line 7: declaration_list : declaration_list COMMA ID

x,y

Line 7: var_declaration : type_specifier declaration_list SEMICOLON

int x,y;

Line 7: statement : var_declaration

int x,y;

Line 7: statements : statement

int x,y;

Line 8: variable : ID

x

Line 8: factor : CONST_INT

11

Line 8: unary_expression : factor

11

Line 8: term : unary_expression

11

Line 8: simple_expression : term

11

Line 8: rel_expression : simple_expression

11

Line 8: logic_expression : rel_expression

11

Line 8: expression : variable ASSIGNOP logic_expression

x=11

Line 8: expression_statement : expression SEMICOLON

x=11;

Line 8: statement : expression_statement

x=11;

Line 8: statements : statements statement

int x,y;
x=11;

Line 9: variable : ID

y

Line 9: factor : CONST_INT

12

Line 9: unary_expression : factor

12

Line 9: term : unary_expression

12

Line 9: simple_expression : term

12

Line 9: rel_expression : simple_expression

12

Line 9: logic_expression : rel_expression

12

Line 9: expression : variable ASSIGNOP logic_expression

y=12

Line 9: expression_statement : expression SEMICOLON

y=12;

Line 9: statement : expression_statement

y=12;

Line 9: statements : statements statement

int x,y;
x=11;
y=12;

Line 10: type_specifier : INT

int

Line 10: declaration_list : ID

s

Line 10: var_declaration : type_specifier declaration_list SEMICOLON

int s;

Line 10: statement : var_declaration

int s;

Line 10: statements : statements statement

int x,y;
x=11;
y=12;
int s;

Line 11: variable : ID

s

Line 11: variable : ID

x

Line 11: factor : variable

x

Line 11: unary_expression : factor

x

Line 11: term : unary_expression

x

Line 11: simple_expression : term

x

Line 11: rel_expression : simple_expression

x

Line 11: logic_expression : rel_expression

x

Line 11: arguments : logic_expression

x

Line 11: variable : ID

y

Line 11: factor : variable

y

Line 11: unary_expression : factor

y

Line 11: term : unary_expression

y

Line 11: simple_expression : term

y

Line 11: rel_expression : simple_expression

y

Line 11: logic_expression : rel_expression

y

Line 11: arguments : arguments COMMA logic_expression

x,y

Line 11: argument_list : arguments

x,y

Line 11: factor : ID LPAREN argument_list RPAREN

sum_1(x,y)

Line 11: unary_expression : factor

sum_1(x,y)

Line 11: term : unary_expression

sum_1(x,y)

Line 11: simple_expression : term

sum_1(x,y)

Line 11: rel_expression : simple_expression

sum_1(x,y)

Line 11: logic_expression : rel_expression

sum_1(x,y)

Line 11: expression : variable ASSIGNOP logic_expression

s=sum_1(x,y)

Line 11: expression_statement : expression SEMICOLON

s=sum_1(x,y);

Line 11: statement : expression_statement

s=sum_1(x,y);

Line 11: statements : statements statement

int x,y;
x=11;
y=12;
int s;
s=sum_1(x,y);

Line 12: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(s);

Line 12: statements : statements statement

int x,y;
x=11;
y=12;
int s;
s=sum_1(x,y);
printf(s);

Line 13: compound_statement : LCURL statements RCURL

{
int x,y;
x=11;
y=12;
int s;
s=sum_1(x,y);
printf(s);
}

ScopeTable # 1.2
0 --> < x , ID > 
1 --> < y , ID > 
25 --> < s , ID > 

ScopeTable # 1
1 --> < main , ID > 
5 --> < sum_1 , ID > 

Line 13: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int x,y;
x=11;
y=12;
int s;
s=sum_1(x,y);
printf(s);
}

Line 13: unit : func_definition

int main(){
int x,y;
x=11;
y=12;
int s;
s=sum_1(x,y);
printf(s);
}

Line 13: program : program unit

int sum_1(int a,int b){
return a+b;
}
int main(){
int x,y;
x=11;
y=12;
int s;
s=sum_1(x,y);
printf(s);
}

Line 13: start : program

ScopeTable # 1
1 --> < main , ID > 
5 --> < sum_1 , ID > 

Total lines: 13
Total errors: 0
