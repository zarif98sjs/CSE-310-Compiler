Line 1: type_specifier : INT

int

Line 1: type_specifier : INT

int

Line 1: parameter_list : type_specifier ID

int a

Line 1: type_specifier : INT

int

Line 1: parameter_list : parameter_list COMMA type_specifier ID

int a,int b

Line 3: variable : ID

a

Line 3: factor : variable

a

Line 3: unary_expression : factor

a

Line 3: term : unary_expression

a

Line 3: variable : ID

b

Line 3: factor : variable

b

Line 3: unary_expression : factor

b

Line 3: term : term MULOP unary_expression

a*b

Line 3: simple_expression : term

a*b

Line 3: rel_expression : simple_expression

a*b

Line 3: logic_expression : rel_expression

a*b

Line 3: expression : logic_expression

a*b

Line 3: statement : RETURN expression SEMICOLON

return a*b;

Line 3: statements : statement

return a*b;

Line 4: compound_statement : LCURL statements RCURL

{
return a*b;
}

ScopeTable # 1.1
7 --> < a , ID > 
8 --> < b , ID > 

ScopeTable # 1
2 --> < f2 , ID > 

Line 4: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int f2(int a,int b){
return a*b;
}

Line 4: unit : func_definition

int f2(int a,int b){
return a*b;
}

Line 4: program : unit

int f2(int a,int b){
return a*b;
}

Line 5: type_specifier : INT

int

Line 5: type_specifier : INT

int

Line 5: parameter_list : type_specifier ID

int a

Line 5: type_specifier : INT

int

Line 5: parameter_list : parameter_list COMMA type_specifier ID

int a,int b

Line 5: type_specifier : INT

int

Line 5: parameter_list : parameter_list COMMA type_specifier ID

int a,int b,int c

Line 5: type_specifier : INT

int

Line 5: parameter_list : parameter_list COMMA type_specifier ID

int a,int b,int c,int d

Line 7: variable : ID

a

Line 7: factor : variable

a

Line 7: unary_expression : factor

a

Line 7: term : unary_expression

a

Line 7: simple_expression : term

a

Line 7: rel_expression : simple_expression

a

Line 7: logic_expression : rel_expression

a

Line 7: arguments : logic_expression

a

Line 7: variable : ID

b

Line 7: factor : variable

b

Line 7: unary_expression : factor

b

Line 7: term : unary_expression

b

Line 7: simple_expression : term

b

Line 7: rel_expression : simple_expression

b

Line 7: logic_expression : rel_expression

b

Line 7: arguments : arguments COMMA logic_expression

a,b

Line 7: argument_list : arguments

a,b

Line 7: factor : ID LPAREN argument_list RPAREN

f2(a,b)

Line 7: unary_expression : factor

f2(a,b)

Line 7: term : unary_expression

f2(a,b)

Line 7: simple_expression : term

f2(a,b)

Line 7: rel_expression : simple_expression

f2(a,b)

Line 7: logic_expression : rel_expression

f2(a,b)

Line 7: arguments : logic_expression

f2(a,b)

Line 7: variable : ID

c

Line 7: factor : variable

c

Line 7: unary_expression : factor

c

Line 7: term : unary_expression

c

Line 7: simple_expression : term

c

Line 7: rel_expression : simple_expression

c

Line 7: logic_expression : rel_expression

c

Line 7: arguments : logic_expression

c

Line 7: variable : ID

d

Line 7: factor : variable

d

Line 7: unary_expression : factor

d

Line 7: term : unary_expression

d

Line 7: simple_expression : term

d

Line 7: rel_expression : simple_expression

d

Line 7: logic_expression : rel_expression

d

Line 7: arguments : arguments COMMA logic_expression

c,d

Line 7: argument_list : arguments

c,d

Line 7: factor : ID LPAREN argument_list RPAREN

f2(c,d)

Line 7: unary_expression : factor

f2(c,d)

Line 7: term : unary_expression

f2(c,d)

Line 7: simple_expression : term

f2(c,d)

Line 7: rel_expression : simple_expression

f2(c,d)

Line 7: logic_expression : rel_expression

f2(c,d)

Line 7: arguments : arguments COMMA logic_expression

f2(a,b),f2(c,d)

Line 7: argument_list : arguments

f2(a,b),f2(c,d)

Line 7: factor : ID LPAREN argument_list RPAREN

f2(f2(a,b),f2(c,d))

Line 7: unary_expression : factor

f2(f2(a,b),f2(c,d))

Line 7: term : unary_expression

f2(f2(a,b),f2(c,d))

Line 7: simple_expression : term

f2(f2(a,b),f2(c,d))

Line 7: rel_expression : simple_expression

f2(f2(a,b),f2(c,d))

Line 7: logic_expression : rel_expression

f2(f2(a,b),f2(c,d))

Line 7: expression : logic_expression

f2(f2(a,b),f2(c,d))

Line 7: statement : RETURN expression SEMICOLON

return f2(f2(a,b),f2(c,d));

Line 7: statements : statement

return f2(f2(a,b),f2(c,d));

Line 8: compound_statement : LCURL statements RCURL

{
return f2(f2(a,b),f2(c,d));
}

ScopeTable # 1.2
7 --> < a , ID > 
8 --> < b , ID > 
9 --> < c , ID > 
10 --> < d , ID > 

ScopeTable # 1
2 --> < f2 , ID > 
4 --> < f4 , ID > 

Line 8: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int f4(int a,int b,int c,int d){
return f2(f2(a,b),f2(c,d));
}

Line 8: unit : func_definition

int f4(int a,int b,int c,int d){
return f2(f2(a,b),f2(c,d));
}

Line 8: program : program unit

int f2(int a,int b){
return a*b;
}
int f4(int a,int b,int c,int d){
return f2(f2(a,b),f2(c,d));
}

Line 9: type_specifier : INT

int

Line 9: declaration_list : ID

count

Line 9: var_declaration : type_specifier declaration_list SEMICOLON

int count;

Line 9: unit : var_declaration

int count;

Line 9: program : program unit

int f2(int a,int b){
return a*b;
}
int f4(int a,int b,int c,int d){
return f2(f2(a,b),f2(c,d));
}
int count;

Line 10: type_specifier : VOID

void

Line 10: type_specifier : INT

int

Line 10: parameter_list : type_specifier ID

int n

Line 12: variable : ID

count

Line 12: factor : variable INCOP

count++

Line 12: unary_expression : factor

count++

Line 12: term : unary_expression

count++

Line 12: simple_expression : term

count++

Line 12: rel_expression : simple_expression

count++

Line 12: logic_expression : rel_expression

count++

Line 12: expression : logic_expression

count++

Line 12: expression_statement : expression SEMICOLON

count++;

Line 12: statement : expression_statement

count++;

Line 12: statements : statement

count++;

Line 13: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(n);

Line 13: statements : statements statement

count++;
printf(n);

Line 14: compound_statement : LCURL statements RCURL

{
count++;
printf(n);
}

ScopeTable # 1.3
20 --> < n , ID > 

ScopeTable # 1
2 --> < f2 , ID > 
4 --> < f4 , ID > 
13 --> < count , ID > 
29 --> < show , ID > 

Line 14: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

void show(int n){
count++;
printf(n);
}

Line 14: unit : func_definition

void show(int n){
count++;
printf(n);
}

Line 14: program : program unit

int f2(int a,int b){
return a*b;
}
int f4(int a,int b,int c,int d){
return f2(f2(a,b),f2(c,d));
}
int count;
void show(int n){
count++;
printf(n);
}

Line 15: type_specifier : INT

int

Line 17: type_specifier : INT

int

Line 17: declaration_list : ID LTHIRD CONST_INT RTHIRD

d[4]

Line 17: var_declaration : type_specifier declaration_list SEMICOLON

int d[4];

Line 17: statement : var_declaration

int d[4];

Line 17: statements : statement

int d[4];

Line 18: type_specifier : INT

int

Line 18: declaration_list : ID

i

Line 18: var_declaration : type_specifier declaration_list SEMICOLON

int i;

Line 18: statement : var_declaration

int i;

Line 18: statements : statements statement

int d[4];
int i;

Line 19: variable : ID

i

Line 19: factor : CONST_INT

0

Line 19: unary_expression : factor

0

Line 19: term : unary_expression

0

Line 19: simple_expression : term

0

Line 19: rel_expression : simple_expression

0

Line 19: logic_expression : rel_expression

0

Line 19: expression : variable ASSIGNOP logic_expression

i=0

Line 19: expression_statement : expression SEMICOLON

i=0;

Line 19: statement : expression_statement

i=0;

Line 19: statements : statements statement

int d[4];
int i;
i=0;

Line 20: variable : ID

i

Line 20: factor : CONST_INT

0

Line 20: unary_expression : factor

0

Line 20: term : unary_expression

0

Line 20: simple_expression : term

0

Line 20: rel_expression : simple_expression

0

Line 20: logic_expression : rel_expression

0

Line 20: expression : variable ASSIGNOP logic_expression

i=0

Line 20: expression_statement : expression SEMICOLON

i=0;

Line 20: variable : ID

i

Line 20: factor : variable

i

Line 20: unary_expression : factor

i

Line 20: term : unary_expression

i

Line 20: simple_expression : term

i

Line 20: factor : CONST_INT

4

Line 20: unary_expression : factor

4

Line 20: term : unary_expression

4

Line 20: simple_expression : term

4

Line 20: rel_expression : simple_expression RELOP simple_expression

i<4

Line 20: logic_expression : rel_expression

i<4

Line 20: expression : logic_expression

i<4

Line 20: expression_statement : expression SEMICOLON

i<4;

Line 20: variable : ID

i

Line 20: factor : variable INCOP

i++

Line 20: unary_expression : factor

i++

Line 20: term : unary_expression

i++

Line 20: simple_expression : term

i++

Line 20: rel_expression : simple_expression

i++

Line 20: logic_expression : rel_expression

i++

Line 20: expression : logic_expression

i++

Line 22: factor : CONST_INT

3

Line 22: unary_expression : factor

3

Line 22: term : unary_expression

3

Line 22: simple_expression : term

3

Line 22: variable : ID

i

Line 22: factor : variable

i

Line 22: unary_expression : factor

i

Line 22: term : unary_expression

i

Line 22: simple_expression : simple_expression ADDOP term

3-i

Line 22: rel_expression : simple_expression

3-i

Line 22: logic_expression : rel_expression

3-i

Line 22: expression : logic_expression

3-i

Line 22: variable : ID LTHIRD expression RTHIRD

d[3-i]

Line 22: variable : ID

i

Line 22: factor : variable

i

Line 22: unary_expression : factor

i

Line 22: term : unary_expression

i

Line 22: simple_expression : term

i

Line 22: factor : CONST_INT

1

Line 22: unary_expression : factor

1

Line 22: term : unary_expression

1

Line 22: simple_expression : simple_expression ADDOP term

i+1

Line 22: rel_expression : simple_expression

i+1

Line 22: logic_expression : rel_expression

i+1

Line 22: expression : logic_expression

i+1

Line 22: factor : LPAREN expression RPAREN

(i+1)

Line 22: unary_expression : factor

(i+1)

Line 22: term : unary_expression

(i+1)

Line 22: factor : CONST_INT

10

Line 22: unary_expression : factor

10

Line 22: term : term MULOP unary_expression

(i+1)*10

Line 22: simple_expression : term

(i+1)*10

Line 22: rel_expression : simple_expression

(i+1)*10

Line 22: logic_expression : rel_expression

(i+1)*10

Line 22: expression : variable ASSIGNOP logic_expression

d[3-i]=(i+1)*10

Line 22: expression_statement : expression SEMICOLON

d[3-i]=(i+1)*10;

Line 22: statement : expression_statement

d[3-i]=(i+1)*10;

Line 22: statements : statement

d[3-i]=(i+1)*10;

Line 23: compound_statement : LCURL statements RCURL

{
d[3-i]=(i+1)*10;
}

ScopeTable # 1.4.1

ScopeTable # 1.4
10 --> < d , ID > 
15 --> < i , ID > 

ScopeTable # 1
1 --> < main , ID > 
2 --> < f2 , ID > 
4 --> < f4 , ID > 
13 --> < count , ID > 
29 --> < show , ID > 

Line 23: statement : compound_statement

{
d[3-i]=(i+1)*10;
}

Line 23: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(i=0;i<4;i++){
d[3-i]=(i+1)*10;
}

Line 23: statements : statements statement

int d[4];
int i;
i=0;
for(i=0;i<4;i++){
d[3-i]=(i+1)*10;
}

Line 24: variable : ID

i

Line 24: factor : CONST_INT

0

Line 24: unary_expression : factor

0

Line 24: term : unary_expression

0

Line 24: simple_expression : term

0

Line 24: rel_expression : simple_expression

0

Line 24: logic_expression : rel_expression

0

Line 24: expression : variable ASSIGNOP logic_expression

i=0

Line 24: expression_statement : expression SEMICOLON

i=0;

Line 24: statement : expression_statement

i=0;

Line 24: statements : statements statement

int d[4];
int i;
i=0;
for(i=0;i<4;i++){
d[3-i]=(i+1)*10;
}
i=0;

Line 25: variable : ID

i

Line 25: factor : variable

i

Line 25: unary_expression : factor

i

Line 25: term : unary_expression

i

Line 25: simple_expression : term

i

Line 25: factor : CONST_INT

4

Line 25: unary_expression : factor

4

Line 25: term : unary_expression

4

Line 25: simple_expression : term

4

Line 25: rel_expression : simple_expression RELOP simple_expression

i<4

Line 25: logic_expression : rel_expression

i<4

Line 25: expression : logic_expression

i<4

Line 27: variable : ID

i

Line 27: factor : variable

i

Line 27: unary_expression : factor

i

Line 27: term : unary_expression

i

Line 27: simple_expression : term

i

Line 27: rel_expression : simple_expression

i

Line 27: logic_expression : rel_expression

i

Line 27: expression : logic_expression

i

Line 27: variable : ID LTHIRD expression RTHIRD

d[i]

Line 27: factor : variable

d[i]

Line 27: unary_expression : factor

d[i]

Line 27: term : unary_expression

d[i]

Line 27: factor : CONST_INT

5

Line 27: unary_expression : factor

5

Line 27: term : term MULOP unary_expression

d[i]/5

Line 27: simple_expression : term

d[i]/5

Line 27: rel_expression : simple_expression

d[i]/5

Line 27: logic_expression : rel_expression

d[i]/5

Line 27: arguments : logic_expression

d[i]/5

Line 27: argument_list : arguments

d[i]/5

Line 27: factor : ID LPAREN argument_list RPAREN

show(d[i]/5)

Line 27: unary_expression : factor

show(d[i]/5)

Line 27: term : unary_expression

show(d[i]/5)

Line 27: simple_expression : term

show(d[i]/5)

Line 27: rel_expression : simple_expression

show(d[i]/5)

Line 27: logic_expression : rel_expression

show(d[i]/5)

Line 27: expression : logic_expression

show(d[i]/5)

Line 27: expression_statement : expression SEMICOLON

show(d[i]/5);

Line 27: statement : expression_statement

show(d[i]/5);

Line 27: statements : statement

show(d[i]/5);

Line 28: variable : ID

i

Line 28: factor : variable INCOP

i++

Line 28: unary_expression : factor

i++

Line 28: term : unary_expression

i++

Line 28: simple_expression : term

i++

Line 28: rel_expression : simple_expression

i++

Line 28: logic_expression : rel_expression

i++

Line 28: expression : logic_expression

i++

Line 28: expression_statement : expression SEMICOLON

i++;

Line 28: statement : expression_statement

i++;

Line 28: statements : statements statement

show(d[i]/5);
i++;

Line 29: compound_statement : LCURL statements RCURL

{
show(d[i]/5);
i++;
}

ScopeTable # 1.4.2

ScopeTable # 1.4
10 --> < d , ID > 
15 --> < i , ID > 

ScopeTable # 1
1 --> < main , ID > 
2 --> < f2 , ID > 
4 --> < f4 , ID > 
13 --> < count , ID > 
29 --> < show , ID > 

Line 29: statement : compound_statement

{
show(d[i]/5);
i++;
}

Line 29: statement : WHILE LPAREN expression RPAREN statement

while(i<4){
show(d[i]/5);
i++;
}

Line 29: statements : statements statement

int d[4];
int i;
i=0;
for(i=0;i<4;i++){
d[3-i]=(i+1)*10;
}
i=0;
while(i<4){
show(d[i]/5);
i++;
}

Line 30: type_specifier : INT

int

Line 30: declaration_list : ID

md

Line 30: var_declaration : type_specifier declaration_list SEMICOLON

int md;

Line 30: statement : var_declaration

int md;

Line 30: statements : statements statement

int d[4];
int i;
i=0;
for(i=0;i<4;i++){
d[3-i]=(i+1)*10;
}
i=0;
while(i<4){
show(d[i]/5);
i++;
}
int md;

Line 31: variable : ID

md

Line 31: factor : CONST_INT

0

Line 31: unary_expression : factor

0

Line 31: term : unary_expression

0

Line 31: simple_expression : term

0

Line 31: rel_expression : simple_expression

0

Line 31: logic_expression : rel_expression

0

Line 31: expression : logic_expression

0

Line 31: variable : ID LTHIRD expression RTHIRD

d[0]

Line 31: factor : variable

d[0]

Line 31: unary_expression : factor

d[0]

Line 31: term : unary_expression

d[0]

Line 31: factor : CONST_INT

1

Line 31: unary_expression : factor

1

Line 31: term : unary_expression

1

Line 31: simple_expression : term

1

Line 31: rel_expression : simple_expression

1

Line 31: logic_expression : rel_expression

1

Line 31: expression : logic_expression

1

Line 31: variable : ID LTHIRD expression RTHIRD

d[1]

Line 31: factor : variable

d[1]

Line 31: unary_expression : factor

d[1]

Line 31: term : term MULOP unary_expression

d[0]%d[1]

Line 31: simple_expression : term

d[0]%d[1]

Line 31: rel_expression : simple_expression

d[0]%d[1]

Line 31: logic_expression : rel_expression

d[0]%d[1]

Line 31: expression : variable ASSIGNOP logic_expression

md=d[0]%d[1]

Line 31: expression_statement : expression SEMICOLON

md=d[0]%d[1];

Line 31: statement : expression_statement

md=d[0]%d[1];

Line 31: statements : statements statement

int d[4];
int i;
i=0;
for(i=0;i<4;i++){
d[3-i]=(i+1)*10;
}
i=0;
while(i<4){
show(d[i]/5);
i++;
}
int md;
md=d[0]%d[1];

Line 32: variable : ID

md

Line 32: factor : variable

md

Line 32: unary_expression : factor

md

Line 32: term : unary_expression

md

Line 32: simple_expression : term

md

Line 32: rel_expression : simple_expression

md

Line 32: logic_expression : rel_expression

md

Line 32: arguments : logic_expression

md

Line 32: argument_list : arguments

md

Line 32: factor : ID LPAREN argument_list RPAREN

show(md)

Line 32: unary_expression : factor

show(md)

Line 32: term : unary_expression

show(md)

Line 32: simple_expression : term

show(md)

Line 32: rel_expression : simple_expression

show(md)

Line 32: logic_expression : rel_expression

show(md)

Line 32: expression : logic_expression

show(md)

Line 32: expression_statement : expression SEMICOLON

show(md);

Line 32: statement : expression_statement

show(md);

Line 32: statements : statements statement

int d[4];
int i;
i=0;
for(i=0;i<4;i++){
d[3-i]=(i+1)*10;
}
i=0;
while(i<4){
show(d[i]/5);
i++;
}
int md;
md=d[0]%d[1];
show(md);

Line 33: variable : ID

count

Line 33: factor : variable

count

Line 33: unary_expression : factor

count

Line 33: term : unary_expression

count

Line 33: simple_expression : term

count

Line 33: rel_expression : simple_expression

count

Line 33: logic_expression : rel_expression

count

Line 33: arguments : logic_expression

count

Line 33: argument_list : arguments

count

Line 33: factor : ID LPAREN argument_list RPAREN

show(count)

Line 33: unary_expression : factor

show(count)

Line 33: term : unary_expression

show(count)

Line 33: simple_expression : term

show(count)

Line 33: rel_expression : simple_expression

show(count)

Line 33: logic_expression : rel_expression

show(count)

Line 33: expression : logic_expression

show(count)

Line 33: expression_statement : expression SEMICOLON

show(count);

Line 33: statement : expression_statement

show(count);

Line 33: statements : statements statement

int d[4];
int i;
i=0;
for(i=0;i<4;i++){
d[3-i]=(i+1)*10;
}
i=0;
while(i<4){
show(d[i]/5);
i++;
}
int md;
md=d[0]%d[1];
show(md);
show(count);

Line 34: type_specifier : INT

int

Line 34: declaration_list : ID

g

Line 34: var_declaration : type_specifier declaration_list SEMICOLON

int g;

Line 34: statement : var_declaration

int g;

Line 34: statements : statements statement

int d[4];
int i;
i=0;
for(i=0;i<4;i++){
d[3-i]=(i+1)*10;
}
i=0;
while(i<4){
show(d[i]/5);
i++;
}
int md;
md=d[0]%d[1];
show(md);
show(count);
int g;

Line 35: variable : ID

g

Line 35: factor : CONST_INT

2

Line 35: unary_expression : factor

2

Line 35: term : unary_expression

2

Line 35: simple_expression : term

2

Line 35: rel_expression : simple_expression

2

Line 35: logic_expression : rel_expression

2

Line 35: arguments : logic_expression

2

Line 35: factor : CONST_INT

3

Line 35: unary_expression : factor

3

Line 35: term : unary_expression

3

Line 35: simple_expression : term

3

Line 35: rel_expression : simple_expression

3

Line 35: logic_expression : rel_expression

3

Line 35: arguments : arguments COMMA logic_expression

2,3

Line 35: factor : CONST_INT

4

Line 35: unary_expression : factor

4

Line 35: term : unary_expression

4

Line 35: simple_expression : term

4

Line 35: rel_expression : simple_expression

4

Line 35: logic_expression : rel_expression

4

Line 35: arguments : arguments COMMA logic_expression

2,3,4

Line 35: factor : CONST_INT

5

Line 35: unary_expression : factor

5

Line 35: term : unary_expression

5

Line 35: simple_expression : term

5

Line 35: rel_expression : simple_expression

5

Line 35: logic_expression : rel_expression

5

Line 35: arguments : arguments COMMA logic_expression

2,3,4,5

Line 35: argument_list : arguments

2,3,4,5

Line 35: factor : ID LPAREN argument_list RPAREN

f4(2,3,4,5)

Line 35: unary_expression : factor

f4(2,3,4,5)

Line 35: term : unary_expression

f4(2,3,4,5)

Line 35: simple_expression : term

f4(2,3,4,5)

Line 35: rel_expression : simple_expression

f4(2,3,4,5)

Line 35: logic_expression : rel_expression

f4(2,3,4,5)

Line 35: expression : variable ASSIGNOP logic_expression

g=f4(2,3,4,5)

Line 35: expression_statement : expression SEMICOLON

g=f4(2,3,4,5);

Line 35: statement : expression_statement

g=f4(2,3,4,5);

Line 35: statements : statements statement

int d[4];
int i;
i=0;
for(i=0;i<4;i++){
d[3-i]=(i+1)*10;
}
i=0;
while(i<4){
show(d[i]/5);
i++;
}
int md;
md=d[0]%d[1];
show(md);
show(count);
int g;
g=f4(2,3,4,5);

Line 36: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(g);

Line 36: statements : statements statement

int d[4];
int i;
i=0;
for(i=0;i<4;i++){
d[3-i]=(i+1)*10;
}
i=0;
while(i<4){
show(d[i]/5);
i++;
}
int md;
md=d[0]%d[1];
show(md);
show(count);
int g;
g=f4(2,3,4,5);
printf(g);

Line 37: factor : CONST_INT

0

Line 37: unary_expression : factor

0

Line 37: term : unary_expression

0

Line 37: simple_expression : term

0

Line 37: rel_expression : simple_expression

0

Line 37: logic_expression : rel_expression

0

Line 37: expression : logic_expression

0

Line 37: statement : RETURN expression SEMICOLON

return 0;

Line 37: statements : statements statement

int d[4];
int i;
i=0;
for(i=0;i<4;i++){
d[3-i]=(i+1)*10;
}
i=0;
while(i<4){
show(d[i]/5);
i++;
}
int md;
md=d[0]%d[1];
show(md);
show(count);
int g;
g=f4(2,3,4,5);
printf(g);
return 0;

Line 38: compound_statement : LCURL statements RCURL

{
int d[4];
int i;
i=0;
for(i=0;i<4;i++){
d[3-i]=(i+1)*10;
}
i=0;
while(i<4){
show(d[i]/5);
i++;
}
int md;
md=d[0]%d[1];
show(md);
show(count);
int g;
g=f4(2,3,4,5);
printf(g);
return 0;
}

ScopeTable # 1.4
10 --> < d , ID > 
13 --> < g , ID > 
15 --> < i , ID > 
29 --> < md , ID > 

ScopeTable # 1
1 --> < main , ID > 
2 --> < f2 , ID > 
4 --> < f4 , ID > 
13 --> < count , ID > 
29 --> < show , ID > 

Line 38: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int d[4];
int i;
i=0;
for(i=0;i<4;i++){
d[3-i]=(i+1)*10;
}
i=0;
while(i<4){
show(d[i]/5);
i++;
}
int md;
md=d[0]%d[1];
show(md);
show(count);
int g;
g=f4(2,3,4,5);
printf(g);
return 0;
}

Line 38: unit : func_definition

int main(){
int d[4];
int i;
i=0;
for(i=0;i<4;i++){
d[3-i]=(i+1)*10;
}
i=0;
while(i<4){
show(d[i]/5);
i++;
}
int md;
md=d[0]%d[1];
show(md);
show(count);
int g;
g=f4(2,3,4,5);
printf(g);
return 0;
}

Line 38: program : program unit

int f2(int a,int b){
return a*b;
}
int f4(int a,int b,int c,int d){
return f2(f2(a,b),f2(c,d));
}
int count;
void show(int n){
count++;
printf(n);
}
int main(){
int d[4];
int i;
i=0;
for(i=0;i<4;i++){
d[3-i]=(i+1)*10;
}
i=0;
while(i<4){
show(d[i]/5);
i++;
}
int md;
md=d[0]%d[1];
show(md);
show(count);
int g;
g=f4(2,3,4,5);
printf(g);
return 0;
}

Line 38: start : program

ScopeTable # 1
1 --> < main , ID > 
2 --> < f2 , ID > 
4 --> < f4 , ID > 
13 --> < count , ID > 
29 --> < show , ID > 

Total lines: 38
Total errors: 0
