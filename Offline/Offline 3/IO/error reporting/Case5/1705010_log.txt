Line 2: type_specifier : INT

int

Line 2: declaration_list : ID

a

Line 2: declaration_list : declaration_list COMMA ID

a,b

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int a,b;

Line 2: unit : var_declaration

int a,b;

Line 2: program : unit

int a,b;

Line 2: type_specifier : FLOAT

float

Line 2: declaration_list : ID

c

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

float c;

Line 2: unit : var_declaration

float c;

Line 2: program : program unit

int a,b;
float c;

Line 4: type_specifier : FLOAT

float

Line 4: type_specifier : FLOAT

float

Line 4: parameter_list : type_specifier ID

float a

Line 5: variable : ID

a

Line 5: factor : variable

a

Line 5: unary_expression : factor

a

Line 5: term : unary_expression

a

Line 5: simple_expression : term

a

Line 5: rel_expression : simple_expression

a

Line 5: logic_expression : rel_expression

a

Line 5: expression : logic_expression

a

Line 5: statement : RETURN expression SEMICOLON

return a;

Line 5: statements : statement

return a;

Line 6: compound_statement : LCURL statements RCURL

{
return a;
}

ScopeTable # 1.1
7 --> < a , ID > 

ScopeTable # 1
7 --> < a , ID > 
8 --> < b , ID > 
9 --> < c , ID > 
27 --> < func1 , ID > 

Line 6: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

float func1(float a){
return a;
}

Line 6: unit : func_definition

float func1(float a){
return a;
}

Line 6: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}

Line 8: type_specifier : INT

int

Line 8: type_specifier : INT

int

Line 8: parameter_list : type_specifier ID

int a

Line 8: type_specifier : FLOAT

float

Line 8: parameter_list : parameter_list COMMA type_specifier ID

int a,float b

Line 8: type_specifier : INT

int

Line 8: parameter_list : parameter_list COMMA type_specifier ID

int a,float b,int c

Line 9: variable : ID

a

Line 9: factor : variable

a

Line 9: unary_expression : factor

a

Line 9: term : unary_expression

a

Line 9: simple_expression : term

a

Line 9: rel_expression : simple_expression

a

Line 9: logic_expression : rel_expression

a

Line 9: expression : logic_expression

a

Line 9: statement : RETURN expression SEMICOLON

return a;

Line 9: statements : statement

return a;

Line 10: compound_statement : LCURL statements RCURL

{
return a;
}

ScopeTable # 1.2
7 --> < a , ID > 
8 --> < b , ID > 
9 --> < c , ID > 

ScopeTable # 1
7 --> < a , ID > 
8 --> < b , ID > 
9 --> < c , ID > 
27 --> < func1 , ID > 
28 --> < func2 , ID > 

Line 10: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int func2(int a,float b,int c){
return a;
}

Line 10: unit : func_definition

int func2(int a,float b,int c){
return a;
}

Line 10: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}
int func2(int a,float b,int c){
return a;
}

Line 12: type_specifier : VOID

void

Line 13: type_specifier : INT

int

Line 13: declaration_list : ID

a

Line 13: var_declaration : type_specifier declaration_list SEMICOLON

int a;

Line 13: statement : var_declaration

int a;

Line 13: statements : statement

int a;

Line 14: compound_statement : LCURL statements RCURL

{
int a;
}

ScopeTable # 1.3
7 --> < a , ID > 

ScopeTable # 1
7 --> < a , ID > 
8 --> < b , ID > 
9 --> < c , ID > 
27 --> < func1 , ID > 
28 --> < func2 , ID > 
29 --> < func3 , ID > 

Line 14: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void func3(){
int a;
}

Line 14: unit : func_definition

void func3(){
int a;
}

Line 14: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}
int func2(int a,float b,int c){
return a;
}
void func3(){
int a;
}

Line 16: type_specifier : INT

int

Line 17: type_specifier : INT

int

Line 17: declaration_list : ID LTHIRD CONST_INT RTHIRD

arr[10]

Line 17: var_declaration : type_specifier declaration_list SEMICOLON

int arr[10];

Line 17: statement : var_declaration

int arr[10];

Line 17: statements : statement

int arr[10];

Line 19: variable : ID

a

Line 19: factor : CONST_INT

10

Line 19: unary_expression : factor

10

Line 19: term : unary_expression

10

Line 19: simple_expression : term

10

Line 19: rel_expression : simple_expression

10

Line 19: logic_expression : rel_expression

10

Line 19: expression : variable ASSIGNOP logic_expression

a=10

Line 19: expression_statement : expression SEMICOLON

a=10;

Line 19: statement : expression_statement

a=10;

Line 19: statements : statements statement

int arr[10];
a=10;

Line 20: variable : ID

a

Line 20: factor : CONST_FLOAT

10.0

Line 20: unary_expression : factor

10.0

Line 20: term : unary_expression

10.0

Line 20: simple_expression : term

10.0

Line 20: rel_expression : simple_expression

10.0

Line 20: logic_expression : rel_expression

10.0

Line 20: expression : variable ASSIGNOP logic_expression

Error at line 20: Type mismatch 

a=10.0

Line 20: expression_statement : expression SEMICOLON

a=10.0;

Line 20: statement : expression_statement

a=10.0;

Line 20: statements : statements statement

int arr[10];
a=10;
a=10.0;

Line 21: variable : ID

c

Line 21: factor : CONST_INT

10

Line 21: unary_expression : factor

10

Line 21: term : unary_expression

10

Line 21: simple_expression : term

10

Line 21: rel_expression : simple_expression

10

Line 21: logic_expression : rel_expression

10

Line 21: expression : variable ASSIGNOP logic_expression

c=10

Line 21: expression_statement : expression SEMICOLON

c=10;

Line 21: statement : expression_statement

c=10;

Line 21: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;

Line 22: variable : ID

a

Line 22: variable : ID

c

Line 22: factor : variable

c

Line 22: unary_expression : factor

c

Line 22: term : unary_expression

c

Line 22: simple_expression : term

c

Line 22: rel_expression : simple_expression

c

Line 22: logic_expression : rel_expression

c

Line 22: arguments : logic_expression

c

Line 22: argument_list : arguments

c

Line 22: factor : ID LPAREN argument_list RPAREN

func1(c)

Line 22: unary_expression : factor

func1(c)

Line 22: term : unary_expression

func1(c)

Line 22: simple_expression : term

func1(c)

Line 22: rel_expression : simple_expression

func1(c)

Line 22: logic_expression : rel_expression

func1(c)

Line 22: expression : variable ASSIGNOP logic_expression

Error at line 22: Type mismatch 

a=func1(c)

Line 22: expression_statement : expression SEMICOLON

a=func1(c);

Line 22: statement : expression_statement

a=func1(c);

Line 22: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);

Line 23: variable : ID

a

Line 23: variable : ID

c

Line 23: factor : variable

c

Line 23: unary_expression : factor

c

Line 23: term : unary_expression

c

Line 23: simple_expression : term

c

Line 23: rel_expression : simple_expression

c

Line 23: logic_expression : rel_expression

c

Line 23: expression : variable ASSIGNOP logic_expression

Error at line 23: Type mismatch 

a=c

Line 23: expression_statement : expression SEMICOLON

a=c;

Line 23: statement : expression_statement

a=c;

Line 23: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;

Line 24: variable : ID

c

Line 24: variable : ID

c

Line 24: factor : variable

c

Line 24: unary_expression : factor

c

Line 24: term : unary_expression

c

Line 24: simple_expression : term

c

Line 24: variable : ID

c

Line 24: factor : variable

c

Line 24: unary_expression : factor

c

Line 24: term : unary_expression

c

Line 24: simple_expression : term

c

Line 24: rel_expression : simple_expression

c

Line 24: logic_expression : rel_expression

c

Line 24: arguments : logic_expression

c

Line 24: argument_list : arguments

c

Line 24: factor : ID LPAREN argument_list RPAREN

func1(c)

Line 24: unary_expression : factor

func1(c)

Line 24: term : unary_expression

func1(c)

Line 24: simple_expression : simple_expression ADDOP term

c+func1(c)

Line 24: variable : ID

a

Line 24: factor : variable

a

Line 24: unary_expression : factor

a

Line 24: term : unary_expression

a

Line 24: simple_expression : simple_expression ADDOP term

c+func1(c)+a

Line 24: variable : ID

b

Line 24: factor : variable

b

Line 24: unary_expression : factor

b

Line 24: term : unary_expression

b

Line 24: simple_expression : simple_expression ADDOP term

c+func1(c)+a+b

Line 24: rel_expression : simple_expression

c+func1(c)+a+b

Line 24: logic_expression : rel_expression

c+func1(c)+a+b

Line 24: expression : variable ASSIGNOP logic_expression

c=c+func1(c)+a+b

Line 24: expression_statement : expression SEMICOLON

c=c+func1(c)+a+b;

Line 24: statement : expression_statement

c=c+func1(c)+a+b;

Line 24: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;

Line 25: variable : ID

a

Line 25: variable : ID

c

Line 25: factor : variable

c

Line 25: unary_expression : factor

c

Line 25: term : unary_expression

c

Line 25: simple_expression : term

c

Line 25: variable : ID

c

Line 25: factor : variable

c

Line 25: unary_expression : factor

c

Line 25: term : unary_expression

c

Line 25: simple_expression : term

c

Line 25: rel_expression : simple_expression

c

Line 25: logic_expression : rel_expression

c

Line 25: arguments : logic_expression

c

Line 25: argument_list : arguments

c

Line 25: factor : ID LPAREN argument_list RPAREN

func1(c)

Line 25: unary_expression : factor

func1(c)

Line 25: term : unary_expression

func1(c)

Line 25: simple_expression : simple_expression ADDOP term

c+func1(c)

Line 25: variable : ID

a

Line 25: factor : variable

a

Line 25: unary_expression : factor

a

Line 25: term : unary_expression

a

Line 25: simple_expression : simple_expression ADDOP term

c+func1(c)+a

Line 25: variable : ID

b

Line 25: factor : variable

b

Line 25: unary_expression : factor

b

Line 25: term : unary_expression

b

Line 25: simple_expression : simple_expression ADDOP term

c+func1(c)+a+b

Line 25: rel_expression : simple_expression

c+func1(c)+a+b

Line 25: logic_expression : rel_expression

c+func1(c)+a+b

Line 25: expression : variable ASSIGNOP logic_expression

Error at line 25: Type mismatch 

a=c+func1(c)+a+b

Line 25: expression_statement : expression SEMICOLON

a=c+func1(c)+a+b;

Line 25: statement : expression_statement

a=c+func1(c)+a+b;

Line 25: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;

Line 27: variable : ID

a

Line 27: factor : CONST_INT

10

Line 27: unary_expression : factor

10

Line 27: term : unary_expression

10

Line 27: simple_expression : term

10

Line 27: rel_expression : simple_expression

10

Line 27: logic_expression : rel_expression

10

Line 27: expression : logic_expression

10

Line 27: variable : ID LTHIRD expression RTHIRD

arr[10]

Line 27: factor : variable

arr[10]

Line 27: unary_expression : factor

arr[10]

Line 27: term : unary_expression

arr[10]

Line 27: simple_expression : term

arr[10]

Line 27: rel_expression : simple_expression

arr[10]

Line 27: logic_expression : rel_expression

arr[10]

Line 27: expression : variable ASSIGNOP logic_expression

a=arr[10]

Line 27: expression_statement : expression SEMICOLON

a=arr[10];

Line 27: statement : expression_statement

a=arr[10];

Line 27: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];

Line 28: variable : ID

a

Line 28: factor : CONST_FLOAT

1.10

Line 28: unary_expression : factor

1.10

Line 28: term : unary_expression

1.10

Line 28: simple_expression : term

1.10

Line 28: rel_expression : simple_expression

1.10

Line 28: logic_expression : rel_expression

1.10

Line 28: expression : logic_expression

1.10

Line 28: variable : ID LTHIRD expression RTHIRD

Error at line 28: Expression inside third brackets not an integer

arr[1.10]

Line 28: factor : variable

arr[1.10]

Line 28: unary_expression : factor

arr[1.10]

Line 28: term : unary_expression

arr[1.10]

Line 28: simple_expression : term

arr[1.10]

Line 28: rel_expression : simple_expression

arr[1.10]

Line 28: logic_expression : rel_expression

arr[1.10]

Line 28: expression : variable ASSIGNOP logic_expression

a=arr[1.10]

Line 28: expression_statement : expression SEMICOLON

a=arr[1.10];

Line 28: statement : expression_statement

a=arr[1.10];

Line 28: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];

Line 30: variable : ID

a

Line 30: factor : CONST_INT

10

Line 30: unary_expression : factor

10

Line 30: term : unary_expression

10

Line 30: simple_expression : term

10

Line 30: factor : CONST_INT

10

Line 30: unary_expression : factor

10

Line 30: term : unary_expression

10

Line 30: factor : CONST_INT

5

Line 30: unary_expression : factor

5

Line 30: term : term MULOP unary_expression

10%5

Line 30: simple_expression : term

10%5

Line 30: rel_expression : simple_expression

10%5

Line 30: logic_expression : rel_expression

10%5

Line 30: expression : logic_expression

10%5

Line 30: factor : LPAREN expression RPAREN

(10%5)

Line 30: unary_expression : factor

(10%5)

Line 30: term : unary_expression

(10%5)

Line 30: simple_expression : simple_expression ADDOP term

10+(10%5)

Line 30: rel_expression : simple_expression

10+(10%5)

Line 30: logic_expression : rel_expression

10+(10%5)

Line 30: expression : variable ASSIGNOP logic_expression

a=10+(10%5)

Line 30: expression_statement : expression SEMICOLON

a=10+(10%5);

Line 30: statement : expression_statement

a=10+(10%5);

Line 30: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);

Line 31: variable : ID

a

Line 31: factor : CONST_INT

10

Line 31: unary_expression : factor

10

Line 31: term : unary_expression

10

Line 31: simple_expression : term

10

Line 31: factor : CONST_INT

10

Line 31: unary_expression : factor

10

Line 31: term : unary_expression

10

Line 31: variable : ID

c

Line 31: factor : variable

c

Line 31: unary_expression : factor

c

Line 31: term : term MULOP unary_expression

Error at line 31: Non-Integer operand on modulus operator

10%c

Line 31: simple_expression : term

10%c

Line 31: rel_expression : simple_expression

10%c

Line 31: logic_expression : rel_expression

10%c

Line 31: expression : logic_expression

10%c

Line 31: factor : LPAREN expression RPAREN

(10%c)

Line 31: unary_expression : factor

(10%c)

Line 31: term : unary_expression

(10%c)

Line 31: simple_expression : simple_expression ADDOP term

10+(10%c)

Line 31: rel_expression : simple_expression

10+(10%c)

Line 31: logic_expression : rel_expression

10+(10%c)

Line 31: expression : variable ASSIGNOP logic_expression

a=10+(10%c)

Line 31: expression_statement : expression SEMICOLON

a=10+(10%c);

Line 31: statement : expression_statement

a=10+(10%c);

Line 31: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);

Line 33: variable : ID

a

Line 33: variable : ID

a

Line 33: factor : variable

a

Line 33: unary_expression : factor

a

Line 33: term : unary_expression

a

Line 33: simple_expression : term

a

Line 33: rel_expression : simple_expression

a

Line 33: logic_expression : rel_expression

a

Line 33: arguments : logic_expression

a

Line 33: variable : ID

c

Line 33: factor : variable

c

Line 33: unary_expression : factor

c

Line 33: term : unary_expression

c

Line 33: simple_expression : term

c

Line 33: rel_expression : simple_expression

c

Line 33: logic_expression : rel_expression

c

Line 33: arguments : arguments COMMA logic_expression

a,c

Line 33: variable : ID

b

Line 33: factor : variable

b

Line 33: unary_expression : factor

b

Line 33: term : unary_expression

b

Line 33: simple_expression : term

b

Line 33: rel_expression : simple_expression

b

Line 33: logic_expression : rel_expression

b

Line 33: arguments : arguments COMMA logic_expression

a,c,b

Line 33: argument_list : arguments

a,c,b

Line 33: factor : ID LPAREN argument_list RPAREN

func2(a,c,b)

Line 33: unary_expression : factor

func2(a,c,b)

Line 33: term : unary_expression

func2(a,c,b)

Line 33: simple_expression : term

func2(a,c,b)

Line 33: rel_expression : simple_expression

func2(a,c,b)

Line 33: logic_expression : rel_expression

func2(a,c,b)

Line 33: expression : variable ASSIGNOP logic_expression

a=func2(a,c,b)

Line 33: expression_statement : expression SEMICOLON

a=func2(a,c,b);

Line 33: statement : expression_statement

a=func2(a,c,b);

Line 33: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);

Line 34: variable : ID

a

Line 34: variable : ID

a

Line 34: factor : variable

a

Line 34: unary_expression : factor

a

Line 34: term : unary_expression

a

Line 34: simple_expression : term

a

Line 34: rel_expression : simple_expression

a

Line 34: logic_expression : rel_expression

a

Line 34: arguments : logic_expression

a

Line 34: variable : ID

c

Line 34: factor : variable

c

Line 34: unary_expression : factor

c

Line 34: term : unary_expression

c

Line 34: simple_expression : term

c

Line 34: rel_expression : simple_expression

c

Line 34: logic_expression : rel_expression

c

Line 34: arguments : arguments COMMA logic_expression

a,c

Line 34: argument_list : arguments

a,c

Line 34: factor : ID LPAREN argument_list RPAREN

Error at line 34: Total number of arguments mismatch in function func2

func2(a,c)

Line 34: unary_expression : factor

func2(a,c)

Line 34: term : unary_expression

func2(a,c)

Line 34: simple_expression : term

func2(a,c)

Line 34: rel_expression : simple_expression

func2(a,c)

Line 34: logic_expression : rel_expression

func2(a,c)

Line 34: expression : variable ASSIGNOP logic_expression

a=func2(a,c)

Line 34: expression_statement : expression SEMICOLON

a=func2(a,c);

Line 34: statement : expression_statement

a=func2(a,c);

Line 34: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);

Line 35: variable : ID

a

Line 35: variable : ID

a

Line 35: factor : variable

a

Line 35: unary_expression : factor

a

Line 35: term : unary_expression

a

Line 35: simple_expression : term

a

Line 35: rel_expression : simple_expression

a

Line 35: logic_expression : rel_expression

a

Line 35: arguments : logic_expression

a

Line 35: variable : ID

b

Line 35: factor : variable

b

Line 35: unary_expression : factor

b

Line 35: term : unary_expression

b

Line 35: simple_expression : term

b

Line 35: rel_expression : simple_expression

b

Line 35: logic_expression : rel_expression

b

Line 35: arguments : arguments COMMA logic_expression

a,b

Line 35: variable : ID

c

Line 35: factor : variable

c

Line 35: unary_expression : factor

c

Line 35: term : unary_expression

c

Line 35: simple_expression : term

c

Line 35: rel_expression : simple_expression

c

Line 35: logic_expression : rel_expression

c

Line 35: arguments : arguments COMMA logic_expression

a,b,c

Line 35: argument_list : arguments

a,b,c

Line 35: factor : ID LPAREN argument_list RPAREN

Error at line 35: 3th argument mismatch in function func2

func2(a,b,c)

Line 35: unary_expression : factor

func2(a,b,c)

Line 35: term : unary_expression

func2(a,b,c)

Line 35: simple_expression : term

func2(a,b,c)

Line 35: rel_expression : simple_expression

func2(a,b,c)

Line 35: logic_expression : rel_expression

func2(a,b,c)

Line 35: expression : variable ASSIGNOP logic_expression

a=func2(a,b,c)

Line 35: expression_statement : expression SEMICOLON

a=func2(a,b,c);

Line 35: statement : expression_statement

a=func2(a,b,c);

Line 35: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);

Line 37: argument_list : 

Line 37: factor : ID LPAREN argument_list RPAREN

func3()

Line 37: unary_expression : factor

func3()

Line 37: term : unary_expression

func3()

Line 37: simple_expression : term

func3()

Line 37: rel_expression : simple_expression

func3()

Line 37: logic_expression : rel_expression

func3()

Line 37: expression : logic_expression

func3()

Line 37: expression_statement : expression SEMICOLON

func3();

Line 37: statement : expression_statement

func3();

Line 37: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();

Line 38: variable : ID

a

Line 38: argument_list : 

Line 38: factor : ID LPAREN argument_list RPAREN

func3()

Line 38: unary_expression : factor

func3()

Line 38: term : unary_expression

func3()

Line 38: simple_expression : term

func3()

Line 38: rel_expression : simple_expression

func3()

Line 38: logic_expression : rel_expression

func3()

Line 38: expression : variable ASSIGNOP logic_expression

Error at line 38: Void function used in expression

a=func3()

Line 38: expression_statement : expression SEMICOLON

a=func3();

Line 38: statement : expression_statement

a=func3();

Line 38: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();

Line 41: variable : ID

a

Line 41: variable : ID

a

Line 41: factor : variable

a

Line 41: unary_expression : factor

a

Line 41: term : unary_expression

a

Line 41: simple_expression : term

a

Line 41: rel_expression : simple_expression

a

Line 41: variable : ID

b

Line 41: factor : variable

b

Line 41: unary_expression : factor

b

Line 41: term : unary_expression

b

Line 41: simple_expression : term

b

Line 41: rel_expression : simple_expression

b

Line 41: variable : ID

c

Line 41: factor : variable

c

Line 41: unary_expression : factor

c

Line 41: term : unary_expression

c

Line 41: simple_expression : term

c

Line 41: rel_expression : simple_expression

c

Line 41: logic_expression : rel_expression LOGICOP rel_expression

b&&c

Line 41: expression : logic_expression

b&&c

Line 41: factor : LPAREN expression RPAREN

(b&&c)

Line 41: unary_expression : factor

(b&&c)

Line 41: term : unary_expression

(b&&c)

Line 41: simple_expression : term

(b&&c)

Line 41: rel_expression : simple_expression

(b&&c)

Line 41: logic_expression : rel_expression LOGICOP rel_expression

a||(b&&c)

Line 41: expression : logic_expression

a||(b&&c)

Line 41: factor : LPAREN expression RPAREN

(a||(b&&c))

Line 41: unary_expression : factor

(a||(b&&c))

Line 41: term : unary_expression

(a||(b&&c))

Line 41: simple_expression : term

(a||(b&&c))

Line 41: rel_expression : simple_expression

(a||(b&&c))

Line 41: logic_expression : rel_expression

(a||(b&&c))

Line 41: expression : variable ASSIGNOP logic_expression

a=(a||(b&&c))

Line 41: expression_statement : expression SEMICOLON

a=(a||(b&&c));

Line 41: statement : expression_statement

a=(a||(b&&c));

Line 41: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));

Line 42: variable : ID

a

Line 42: variable : ID

a

Line 42: factor : variable

a

Line 42: unary_expression : factor

a

Line 42: term : unary_expression

a

Line 42: simple_expression : term

a

Line 42: rel_expression : simple_expression

a

Line 42: variable : ID

b

Line 42: factor : variable

b

Line 42: unary_expression : factor

b

Line 42: term : unary_expression

b

Line 42: simple_expression : term

b

Line 42: rel_expression : simple_expression

b

Line 42: argument_list : 

Line 42: factor : ID LPAREN argument_list RPAREN

func3()

Line 42: unary_expression : factor

func3()

Line 42: term : unary_expression

func3()

Line 42: simple_expression : term

func3()

Line 42: rel_expression : simple_expression

func3()

Line 42: logic_expression : rel_expression LOGICOP rel_expression

Error at line 42: Void function used in expression

b&&func3()

Line 42: expression : logic_expression

b&&func3()

Line 42: factor : LPAREN expression RPAREN

(b&&func3())

Line 42: unary_expression : factor

(b&&func3())

Line 42: term : unary_expression

(b&&func3())

Line 42: simple_expression : term

(b&&func3())

Line 42: rel_expression : simple_expression

(b&&func3())

Line 42: logic_expression : rel_expression LOGICOP rel_expression

a||(b&&func3())

Line 42: expression : logic_expression

a||(b&&func3())

Line 42: factor : LPAREN expression RPAREN

(a||(b&&func3()))

Line 42: unary_expression : factor

(a||(b&&func3()))

Line 42: term : unary_expression

(a||(b&&func3()))

Line 42: simple_expression : term

(a||(b&&func3()))

Line 42: rel_expression : simple_expression

(a||(b&&func3()))

Line 42: logic_expression : rel_expression

(a||(b&&func3()))

Line 42: expression : variable ASSIGNOP logic_expression

a=(a||(b&&func3()))

Line 42: expression_statement : expression SEMICOLON

a=(a||(b&&func3()));

Line 42: statement : expression_statement

a=(a||(b&&func3()));

Line 42: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));

Line 44: variable : ID

a

Line 44: variable : ID

a

Line 44: factor : variable

a

Line 44: unary_expression : factor

a

Line 44: term : unary_expression

a

Line 44: simple_expression : term

a

Line 44: variable : ID

c

Line 44: factor : variable

c

Line 44: unary_expression : factor

c

Line 44: term : unary_expression

c

Line 44: simple_expression : term

c

Line 44: rel_expression : simple_expression RELOP simple_expression

a<=c

Line 44: logic_expression : rel_expression

a<=c

Line 44: expression : logic_expression

a<=c

Line 44: factor : LPAREN expression RPAREN

(a<=c)

Line 44: unary_expression : factor

(a<=c)

Line 44: term : unary_expression

(a<=c)

Line 44: simple_expression : term

(a<=c)

Line 44: rel_expression : simple_expression

(a<=c)

Line 44: logic_expression : rel_expression

(a<=c)

Line 44: expression : variable ASSIGNOP logic_expression

a=(a<=c)

Line 44: expression_statement : expression SEMICOLON

a=(a<=c);

Line 44: statement : expression_statement

a=(a<=c);

Line 44: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);

Line 45: variable : ID

a

Line 45: variable : ID

a

Line 45: factor : variable

a

Line 45: unary_expression : factor

a

Line 45: term : unary_expression

a

Line 45: simple_expression : term

a

Line 45: argument_list : 

Line 45: factor : ID LPAREN argument_list RPAREN

func3()

Line 45: unary_expression : factor

func3()

Line 45: term : unary_expression

func3()

Line 45: simple_expression : term

func3()

Line 45: rel_expression : simple_expression RELOP simple_expression

Error at line 45: Void function used in expression

a==func3()

Line 45: logic_expression : rel_expression

a==func3()

Line 45: expression : logic_expression

a==func3()

Line 45: factor : LPAREN expression RPAREN

(a==func3())

Line 45: unary_expression : factor

(a==func3())

Line 45: term : unary_expression

(a==func3())

Line 45: simple_expression : term

(a==func3())

Line 45: rel_expression : simple_expression

(a==func3())

Line 45: logic_expression : rel_expression

(a==func3())

Line 45: expression : variable ASSIGNOP logic_expression

a=(a==func3())

Line 45: expression_statement : expression SEMICOLON

a=(a==func3());

Line 45: statement : expression_statement

a=(a==func3());

Line 45: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());

Line 48: variable : ID

Error at line 48: Undeclared variable d

d

Line 48: variable : ID

c

Line 48: factor : variable

c

Line 48: unary_expression : factor

c

Line 48: term : unary_expression

c

Line 48: simple_expression : term

c

Line 48: rel_expression : simple_expression

c

Line 48: logic_expression : rel_expression

c

Line 48: expression : variable ASSIGNOP logic_expression

d=c

Line 48: expression_statement : expression SEMICOLON

d=c;

Line 48: statement : expression_statement

d=c;

Line 48: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;

Line 49: type_specifier : INT

int

Line 49: declaration_list : ID LTHIRD CONST_INT RTHIRD

arr[10]

Line 49: var_declaration : type_specifier declaration_list SEMICOLON

Error at line 49: Multiple declaration of arr

int arr[10];

Line 49: statement : var_declaration

int arr[10];

Line 49: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];

Line 52: factor : CONST_INT

10

Line 52: unary_expression : factor

10

Line 52: term : unary_expression

10

Line 52: simple_expression : term

10

Line 52: rel_expression : simple_expression

10

Line 52: logic_expression : rel_expression

10

Line 52: expression : logic_expression

10

Line 52: variable : ID LTHIRD expression RTHIRD

arr[10]

Line 52: variable : ID

a

Line 52: factor : variable

a

Line 52: unary_expression : factor

a

Line 52: term : unary_expression

a

Line 52: simple_expression : term

a

Line 52: rel_expression : simple_expression

a

Line 52: logic_expression : rel_expression

a

Line 52: expression : variable ASSIGNOP logic_expression

arr[10]=a

Line 52: expression_statement : expression SEMICOLON

arr[10]=a;

Line 52: statement : expression_statement

arr[10]=a;

Line 52: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;

Line 53: variable : ID

Error at line 53: Type mismatch arr is an array

arr

Line 53: variable : ID

a

Line 53: factor : variable

a

Line 53: unary_expression : factor

a

Line 53: term : unary_expression

a

Line 53: simple_expression : term

a

Line 53: rel_expression : simple_expression

a

Line 53: logic_expression : rel_expression

a

Line 53: expression : variable ASSIGNOP logic_expression

arr=a

Line 53: expression_statement : expression SEMICOLON

arr=a;

Line 53: statement : expression_statement

arr=a;

Line 53: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;

Line 54: variable : ID

a

Line 54: factor : CONST_INT

10

Line 54: unary_expression : factor

10

Line 54: term : unary_expression

10

Line 54: simple_expression : term

10

Line 54: rel_expression : simple_expression

10

Line 54: logic_expression : rel_expression

10

Line 54: expression : logic_expression

10

Line 54: variable : ID LTHIRD expression RTHIRD

Error at line 54: c not an array

c[10]

Line 54: factor : variable

c[10]

Line 54: unary_expression : factor

c[10]

Line 54: term : unary_expression

c[10]

Line 54: simple_expression : term

c[10]

Line 54: rel_expression : simple_expression

c[10]

Line 54: logic_expression : rel_expression

c[10]

Line 54: expression : variable ASSIGNOP logic_expression

a=c[10]

Line 54: expression_statement : expression SEMICOLON

a=c[10];

Line 54: statement : expression_statement

a=c[10];

Line 54: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];

Line 57: variable : ID

a

Line 57: variable : ID

b

Line 57: factor : variable

b

Line 57: unary_expression : factor

b

Line 57: term : unary_expression

b

Line 57: simple_expression : term

b

Line 57: rel_expression : simple_expression

b

Line 57: logic_expression : rel_expression

b

Line 57: arguments : logic_expression

b

Line 57: argument_list : arguments

b

Line 57: factor : ID LPAREN argument_list RPAREN

Error at line 57: c not a function

Line 57: unary_expression : factor

c(b)

Line 57: term : unary_expression

c(b)

Line 57: simple_expression : term

c(b)

Line 57: rel_expression : simple_expression

c(b)

Line 57: logic_expression : rel_expression

c(b)

Line 57: expression : variable ASSIGNOP logic_expression

a=c(b)

Line 57: expression_statement : expression SEMICOLON

a=c(b);

Line 57: statement : expression_statement

a=c(b);

Line 57: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);

Line 58: compound_statement : LCURL statements RCURL

{
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}

ScopeTable # 1.4
25 --> < arr , ID > 

ScopeTable # 1
1 --> < main , ID > 
7 --> < a , ID > 
8 --> < b , ID > 
9 --> < c , ID > 
27 --> < func1 , ID > 
28 --> < func2 , ID > 
29 --> < func3 , ID > 

Line 58: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}

Line 58: unit : func_definition

int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}

Line 58: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}
int func2(int a,float b,int c){
return a;
}
void func3(){
int a;
}
int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}

Line 62: type_specifier : INT

int

Line 62: type_specifier : INT

int

Line 62: parameter_list : type_specifier ID

int a

Line 62: func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON

int func4(int a);

Line 62: unit : func_declaration

int func4(int a);

Line 62: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}
int func2(int a,float b,int c){
return a;
}
void func3(){
int a;
}
int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}
int func4(int a);

Line 64: type_specifier : INT

int

Line 64: type_specifier : INT

int

Line 64: parameter_list : type_specifier ID

int a

Line 64: func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON

Error at line 64: Multiple declaration of func4

int func4(int a);

Line 64: unit : func_declaration

int func4(int a);

Line 64: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}
int func2(int a,float b,int c){
return a;
}
void func3(){
int a;
}
int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}
int func4(int a);
int func4(int a);

Line 66: type_specifier : INT

int

Line 66: type_specifier : INT

int

Line 66: parameter_list : type_specifier ID

int a

Line 66: type_specifier : FLOAT

float

Line 66: parameter_list : parameter_list COMMA type_specifier ID

int a,float b

Error at line 66: Total number of arguments mismatch with declaration in function func4

Line 67: variable : ID

a

Line 67: factor : variable

a

Line 67: unary_expression : factor

a

Line 67: term : unary_expression

a

Line 67: simple_expression : term

a

Line 67: rel_expression : simple_expression

a

Line 67: logic_expression : rel_expression

a

Line 67: expression : logic_expression

a

Line 67: statement : RETURN expression SEMICOLON

return a;

Line 67: statements : statement

return a;

Line 68: compound_statement : LCURL statements RCURL

{
return a;
}

ScopeTable # 1.5
7 --> < a , ID > 
8 --> < b , ID > 

ScopeTable # 1
0 --> < func4 , ID > 
1 --> < main , ID > 
7 --> < a , ID > 
8 --> < b , ID > 
9 --> < c , ID > 
27 --> < func1 , ID > 
28 --> < func2 , ID > 
29 --> < func3 , ID > 

Line 68: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int func4(int a,float b){
return a;
}

Line 68: unit : func_definition

int func4(int a,float b){
return a;
}

Line 68: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}
int func2(int a,float b,int c){
return a;
}
void func3(){
int a;
}
int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}
int func4(int a);
int func4(int a);
int func4(int a,float b){
return a;
}

Line 70: type_specifier : FLOAT

float

Line 70: type_specifier : INT

int

Line 70: parameter_list : type_specifier ID

int c

Line 70: func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON

float func5(int c);

Line 70: unit : func_declaration

float func5(int c);

Line 70: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}
int func2(int a,float b,int c){
return a;
}
void func3(){
int a;
}
int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}
int func4(int a);
int func4(int a);
int func4(int a,float b){
return a;
}
float func5(int c);

Line 72: type_specifier : INT

int

Line 72: type_specifier : INT

int

Line 72: parameter_list : type_specifier ID

int c

Error at line 72: Return type mismatch with function declaration in function func5

Line 73: variable : ID

c

Line 73: factor : variable

c

Line 73: unary_expression : factor

c

Line 73: term : unary_expression

c

Line 73: simple_expression : term

c

Line 73: rel_expression : simple_expression

c

Line 73: logic_expression : rel_expression

c

Line 73: expression : logic_expression

c

Line 73: statement : RETURN expression SEMICOLON

return c;

Line 73: statements : statement

return c;

Line 74: compound_statement : LCURL statements RCURL

{
return c;
}

ScopeTable # 1.6
9 --> < c , ID > 

ScopeTable # 1
0 --> < func4 , ID > 
1 --> < main , ID > < func5 , ID > 
7 --> < a , ID > 
8 --> < b , ID > 
9 --> < c , ID > 
27 --> < func1 , ID > 
28 --> < func2 , ID > 
29 --> < func3 , ID > 

Line 74: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int func5(int c){
return c;
}

Line 74: unit : func_definition

int func5(int c){
return c;
}

Line 74: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}
int func2(int a,float b,int c){
return a;
}
void func3(){
int a;
}
int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}
int func4(int a);
int func4(int a);
int func4(int a,float b){
return a;
}
float func5(int c);
int func5(int c){
return c;
}

Line 76: type_specifier : INT

int

Line 76: type_specifier : INT

int

Line 76: parameter_list : type_specifier ID

int a

Line 76: func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON

int func6(int a);

Line 76: unit : func_declaration

int func6(int a);

Line 76: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}
int func2(int a,float b,int c){
return a;
}
void func3(){
int a;
}
int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}
int func4(int a);
int func4(int a);
int func4(int a,float b){
return a;
}
float func5(int c);
int func5(int c){
return c;
}
int func6(int a);

Line 78: type_specifier : INT

int

Line 78: type_specifier : INT

int

Line 78: parameter_list : type_specifier ID

int a

Line 79: variable : ID

a

Line 79: factor : variable

a

Line 79: unary_expression : factor

a

Line 79: term : unary_expression

a

Line 79: simple_expression : term

a

Line 79: rel_expression : simple_expression

a

Line 79: logic_expression : rel_expression

a

Line 79: expression : logic_expression

a

Line 79: statement : RETURN expression SEMICOLON

return a;

Line 79: statements : statement

return a;

Line 80: compound_statement : LCURL statements RCURL

{
return a;
}

ScopeTable # 1.7
7 --> < a , ID > 

ScopeTable # 1
0 --> < func4 , ID > 
1 --> < main , ID > < func5 , ID > 
2 --> < func6 , ID > 
7 --> < a , ID > 
8 --> < b , ID > 
9 --> < c , ID > 
27 --> < func1 , ID > 
28 --> < func2 , ID > 
29 --> < func3 , ID > 

Line 80: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int func6(int a){
return a;
}

Line 80: unit : func_definition

int func6(int a){
return a;
}

Line 80: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}
int func2(int a,float b,int c){
return a;
}
void func3(){
int a;
}
int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}
int func4(int a);
int func4(int a);
int func4(int a,float b){
return a;
}
float func5(int c);
int func5(int c){
return c;
}
int func6(int a);
int func6(int a){
return a;
}

Line 82: type_specifier : INT

int

Line 82: type_specifier : INT

int

Line 82: parameter_list : type_specifier ID

int a

Error at line 82: Multiple declaration of func6

Line 83: variable : ID

a

Line 83: factor : variable

a

Line 83: unary_expression : factor

a

Line 83: term : unary_expression

a

Line 83: simple_expression : term

a

Line 83: rel_expression : simple_expression

a

Line 83: logic_expression : rel_expression

a

Line 83: expression : logic_expression

a

Line 83: statement : RETURN expression SEMICOLON

return a;

Line 83: statements : statement

return a;

Line 84: compound_statement : LCURL statements RCURL

{
return a;
}

ScopeTable # 1.8
7 --> < a , ID > 

ScopeTable # 1
0 --> < func4 , ID > 
1 --> < main , ID > < func5 , ID > 
2 --> < func6 , ID > 
7 --> < a , ID > 
8 --> < b , ID > 
9 --> < c , ID > 
27 --> < func1 , ID > 
28 --> < func2 , ID > 
29 --> < func3 , ID > 

Line 84: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int func6(int a){
return a;
}

Line 84: unit : func_definition

int func6(int a){
return a;
}

Line 84: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}
int func2(int a,float b,int c){
return a;
}
void func3(){
int a;
}
int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}
int func4(int a);
int func4(int a);
int func4(int a,float b){
return a;
}
float func5(int c);
int func5(int c){
return c;
}
int func6(int a);
int func6(int a){
return a;
}
int func6(int a){
return a;
}

Line 86: type_specifier : FLOAT

float

Line 86: type_specifier : INT

int

Line 86: parameter_list : type_specifier ID

int a

Line 86: func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON

float func7(int a);

Line 86: unit : func_declaration

float func7(int a);

Line 86: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}
int func2(int a,float b,int c){
return a;
}
void func3(){
int a;
}
int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}
int func4(int a);
int func4(int a);
int func4(int a,float b){
return a;
}
float func5(int c);
int func5(int c){
return c;
}
int func6(int a);
int func6(int a){
return a;
}
int func6(int a){
return a;
}
float func7(int a);

Line 88: type_specifier : FLOAT

float

Line 88: type_specifier : INT

int

Line 88: parameter_list : type_specifier ID

int c

Line 88: type_specifier : INT

int

Line 88: parameter_list : parameter_list COMMA type_specifier ID

int c,int a

Error at line 88: Total number of arguments mismatch with declaration in function func7

Line 89: variable : ID

c

Line 89: factor : variable

c

Line 89: unary_expression : factor

c

Line 89: term : unary_expression

c

Line 89: simple_expression : term

c

Line 89: rel_expression : simple_expression

c

Line 89: logic_expression : rel_expression

c

Line 89: expression : logic_expression

c

Line 89: statement : RETURN expression SEMICOLON

return c;

Line 89: statements : statement

return c;

Line 90: compound_statement : LCURL statements RCURL

{
return c;
}

ScopeTable # 1.9
7 --> < a , ID > 
9 --> < c , ID > 

ScopeTable # 1
0 --> < func4 , ID > 
1 --> < main , ID > < func5 , ID > 
2 --> < func6 , ID > 
3 --> < func7 , ID > 
7 --> < a , ID > 
8 --> < b , ID > 
9 --> < c , ID > 
27 --> < func1 , ID > 
28 --> < func2 , ID > 
29 --> < func3 , ID > 

Line 90: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

float func7(int c,int a){
return c;
}

Line 90: unit : func_definition

float func7(int c,int a){
return c;
}

Line 90: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}
int func2(int a,float b,int c){
return a;
}
void func3(){
int a;
}
int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}
int func4(int a);
int func4(int a);
int func4(int a,float b){
return a;
}
float func5(int c);
int func5(int c){
return c;
}
int func6(int a);
int func6(int a){
return a;
}
int func6(int a){
return a;
}
float func7(int a);
float func7(int c,int a){
return c;
}

Line 91: start : program

ScopeTable # 1
0 --> < func4 , ID > 
1 --> < main , ID > < func5 , ID > 
2 --> < func6 , ID > 
3 --> < func7 , ID > 
7 --> < a , ID > 
8 --> < b , ID > 
9 --> < c , ID > 
27 --> < func1 , ID > 
28 --> < func2 , ID > 
29 --> < func3 , ID > 

Total lines: 91
Total errors: 21
