Line 1: type_specifier : INT

int

Line 1: declaration_list : ID

x

Line 1: declaration_list : declaration_list COMMA ID

x,y

Line 1: declaration_list : declaration_list COMMA ID

x,y,z

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int x,y,z;

Line 1: unit : var_declaration

int x,y,z;


Line 1: program : unit

int x,y,z;


Line 1: type_specifier : FLOAT

float

Line 1: declaration_list : ID

a

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

float a;

Line 1: unit : var_declaration

float a;


Line 1: program : program unit

int x,y,z;
float a;


Line 3: type_specifier : INT

int

Line 3: type_specifier : INT

int

Line 3: parameter_list : type_specifier ID

int a

Line 3: type_specifier : INT

int

Line 3: parameter_list : parameter_list COMMA type_specifier ID

int a,int b

Line 3: func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON

int var(int a,int b);


Line 3: unit : func_declaration

int var(int a,int b);


Line 3: program : program unit

int x,y,z;
float a;
int var(int a,int b);


Line 5: type_specifier : INT

int

Line 5: type_specifier : INT

int

Line 5: parameter_list : type_specifier ID

int a

Line 5: type_specifier : INT

int

Line 5: parameter_list : parameter_list COMMA type_specifier ID

int a,int b

Line 5: func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON

int foo3(int a,int b);


Line 5: unit : func_declaration

int foo3(int a,int b);


Line 5: program : program unit

int x,y,z;
float a;
int var(int a,int b);
int foo3(int a,int b);


Line 7: type_specifier : INT

int

Line 7: type_specifier : INT

int

Line 7: parameter_list : type_specifier ID

int c

Line 7: type_specifier : INT

int

Line 7: parameter_list : parameter_list COMMA type_specifier ID

int c,int d

Line 8: factor : CONST_INT

7

Line 8: unary_expression : factor

7

Line 8: term : unary_expression

7

Line 8: simple_expression : term

7

Line 8: rel_expression : simple_expression

7

Line 8: logic_expression : rel_expression

7

Line 8: expression : logic expression

7

Line 8: statement : RETURN expression SEMICOLON

return 7;


Line 8: statements : statement

return 7;


Line 9: compound_statement : LCURL statements RCURL

{
return 7;
}




ScopeTable # 1.3
 9 --> < c , ID > 
 10 --> < d , ID > 



ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > 
 2 --> < z , ID > 
 7 --> < a , ID > 
 8 --> < func , ID >
 15 --> < foo3 , ID >
 29 --> < var , ID >


Line 9: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int func(int c,int d){
return 7;
}


Line 9: unit : func_definition

int func(int c,int d){
return 7;
}



Line 9: program : program unit

int x,y,z;
float a;
int var(int a,int b);
int foo3(int a,int b);
int func(int c,int d){
return 7;
}



Line 11: type_specifier : INT

int

Line 11: type_specifier : INT

int

Line 11: parameter_list : type_specifier ID

int a

Line 11: type_specifier : FLOAT

float

Line 11: parameter_list : parameter_list COMMA type_specifier ID

int a,float b

Line 12: variable : ID

a

Line 12: factor : variable

a

Line 12: unary_expression : factor

a

Line 12: term : unary_expression

a

Line 12: simple_expression : term

a

Line 12: factor : CONST_INT

3

Line 12: unary_expression : factor

3

Line 12: term : unary_expression

3

Line 12: simple_expression : simple_expression ADDOP term

a+3

Line 12: rel_expression : simple_expression

a+3

Line 12: logic_expression : rel_expression

a+3

Line 12: expression : logic expression

a+3

Line 12: statement : RETURN expression SEMICOLON

return a+3;


Line 12: statements : statement

return a+3;


Line 13: compound_statement : LCURL statements RCURL

{
return a+3;
}




ScopeTable # 1.4
 7 --> < a , ID > 
 8 --> < b , ID > 



ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > 
 2 --> < z , ID > 
 3 --> < correct_foo , ID >
 7 --> < a , ID > 
 8 --> < func , ID >
 15 --> < foo3 , ID >
 29 --> < var , ID >


Line 13: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int correct_foo(int a,float b){
return a+3;
}


Line 13: unit : func_definition

int correct_foo(int a,float b){
return a+3;
}



Line 13: program : program unit

int x,y,z;
float a;
int var(int a,int b);
int foo3(int a,int b);
int func(int c,int d){
return 7;
}

int correct_foo(int a,float b){
return a+3;
}



Line 16: type_specifier : VOID

void

Line 16: type_specifier : INT

int

Line 16: parameter_list : type_specifier ID

int a

Line 17: variable : ID

y

Line 17: factor : CONST_INT

6

Line 17: unary_expression : factor

6

Line 17: term : unary_expression

6

Line 17: simple_expression : term

6

Line 17: rel_expression : simple_expression

6

Line 17: logic_expression : rel_expression

6

Line 17: expression : variable ASSIGNOP logic_expression

y=6

Line 17: expression_statement : expression SEMICOLON

y=6;

Line 17: statement : expression_statement

y=6;


Line 17: statements : statement

y=6;


Line 18: compound_statement : LCURL statements RCURL

{
y=6;
}




ScopeTable # 1.5
 7 --> < a , ID > 



ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > 
 2 --> < z , ID > 
 3 --> < correct_foo , ID >
 7 --> < a , ID > 
 8 --> < func , ID >
 15 --> < foo3 , ID >
 24 --> < foo , ID >
 29 --> < var , ID >


Line 18: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

void foo(int a){
y=6;
}


Line 18: unit : func_definition

void foo(int a){
y=6;
}



Line 18: program : program unit

int x,y,z;
float a;
int var(int a,int b);
int foo3(int a,int b);
int func(int c,int d){
return 7;
}

int correct_foo(int a,float b){
return a+3;
}

void foo(int a){
y=6;
}



Line 20: type_specifier : INT

int

Line 20: type_specifier : INT

int

Line 20: parameter_list : type_specifier ID

int a

Line 20: type_specifier : INT

int

Error at line 20: Multiple declaration of a in parameter

Line 20: parameter_list : parameter_list COMMA type_specifier ID

int a,int a

Line 20: type_specifier : FLOAT

float

Line 20: parameter_list : parameter_list COMMA type_specifier ID

int a,int a,float b

Line 21: variable : ID

a

Line 21: factor : variable

a

Line 21: unary_expression : factor

a

Line 21: term : unary_expression

a

Line 21: simple_expression : term

a

Line 21: factor : CONST_INT

2

Line 21: unary_expression : factor

2

Line 21: term : unary_expression

2

Line 21: simple_expression : simple_expression ADDOP term

a+2

Line 21: rel_expression : simple_expression

a+2

Line 21: logic_expression : rel_expression

a+2

Line 21: expression : logic expression

a+2

Line 21: statement : RETURN expression SEMICOLON

return a+2;


Line 21: statements : statement

return a+2;


Line 22: compound_statement : LCURL statements RCURL

{
return a+2;
}




ScopeTable # 1.6
 7 --> < a , ID > 
 8 --> < b , ID > 



ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > 
 2 --> < z , ID > 
 3 --> < correct_foo , ID >
 7 --> < a , ID > 
 8 --> < func , ID >
 14 --> < foo2 , ID >
 15 --> < foo3 , ID >
 24 --> < foo , ID >
 29 --> < var , ID >


Line 22: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int foo2(int a,int a,float b){
return a+2;
}


Line 22: unit : func_definition

int foo2(int a,int a,float b){
return a+2;
}



Line 22: program : program unit

int x,y,z;
float a;
int var(int a,int b);
int foo3(int a,int b);
int func(int c,int d){
return 7;
}

int correct_foo(int a,float b){
return a+3;
}

void foo(int a){
y=6;
}

int foo2(int a,int a,float b){
return a+2;
}



Line 24: type_specifier : VOID

void

Line 24: type_specifier : INT

int

Line 24: parameter_list : type_specifier ID

int a

Line 24: type_specifier : INT

int

Line 24: parameter_list : parameter_list COMMA type_specifier ID

int a,int b

Error at line 24: Return type mismatch with function declaration in function foo3

Line 25: variable : ID

y

Line 25: factor : CONST_INT

7

Line 25: unary_expression : factor

7

Line 25: term : unary_expression

7

Line 25: simple_expression : term

7

Line 25: rel_expression : simple_expression

7

Line 25: logic_expression : rel_expression

7

Line 25: expression : variable ASSIGNOP logic_expression

y=7

Line 25: expression_statement : expression SEMICOLON

y=7;

Line 25: statement : expression_statement

y=7;


Line 25: statements : statement

y=7;


Line 26: compound_statement : LCURL statements RCURL

{
y=7;
}




ScopeTable # 1.7
 7 --> < a , ID > 
 8 --> < b , ID > 



ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > 
 2 --> < z , ID > 
 3 --> < correct_foo , ID >
 7 --> < a , ID > 
 8 --> < func , ID >
 14 --> < foo2 , ID >
 15 --> < foo3 , ID >
 24 --> < foo , ID >
 29 --> < var , ID >


Line 26: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

void foo3(int a,int b){
y=7;
}


Line 26: unit : func_definition

void foo3(int a,int b){
y=7;
}



Line 26: program : program unit

int x,y,z;
float a;
int var(int a,int b);
int foo3(int a,int b);
int func(int c,int d){
return 7;
}

int correct_foo(int a,float b){
return a+3;
}

void foo(int a){
y=6;
}

int foo2(int a,int a,float b){
return a+2;
}

void foo3(int a,int b){
y=7;
}



Line 28: type_specifier : INT

int

Line 28: type_specifier : INT

int

Line 28: parameter_list : type_specifier ID

int d

Error at line 28: Multiple declaration of z

Line 29: variable : ID

d

Line 29: factor : variable

d

Line 29: unary_expression : factor

d

Line 29: term : unary_expression

d

Line 29: simple_expression : term

d

Line 29: rel_expression : simple_expression

d

Line 29: logic_expression : rel_expression

d

Line 29: expression : logic expression

d

Line 29: statement : RETURN expression SEMICOLON

return d;


Line 29: statements : statement

return d;


Line 30: compound_statement : LCURL statements RCURL

{
return d;
}




ScopeTable # 1.8
 10 --> < d , ID > 



ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > 
 2 --> < z , ID > 
 3 --> < correct_foo , ID >
 7 --> < a , ID > 
 8 --> < func , ID >
 14 --> < foo2 , ID >
 15 --> < foo3 , ID >
 24 --> < foo , ID >
 29 --> < var , ID >


Line 30: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int z(int d){
return d;
}


Line 30: unit : func_definition

int z(int d){
return d;
}



Line 30: program : program unit

int x,y,z;
float a;
int var(int a,int b);
int foo3(int a,int b);
int func(int c,int d){
return 7;
}

int correct_foo(int a,float b){
return a+3;
}

void foo(int a){
y=6;
}

int foo2(int a,int a,float b){
return a+2;
}

void foo3(int a,int b){
y=7;
}

int z(int d){
return d;
}



Line 32: type_specifier : INT

int

Line 32: type_specifier : INT

int

Line 32: parameter_list : type_specifier ID

int a

Error at line 32: Total number of arguments mismatch with declaration in function var

Line 33: variable : ID

a

Line 33: factor : variable

a

Line 33: unary_expression : factor

a

Line 33: term : unary_expression

a

Line 33: simple_expression : term

a

Line 33: rel_expression : simple_expression

a

Line 33: logic_expression : rel_expression

a

Line 33: expression : logic expression

a

Line 33: statement : RETURN expression SEMICOLON

return a;


Line 33: statements : statement

return a;


Line 34: compound_statement : LCURL statements RCURL

{
return a;
}




ScopeTable # 1.9
 7 --> < a , ID > 



ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > 
 2 --> < z , ID > 
 3 --> < correct_foo , ID >
 7 --> < a , ID > 
 8 --> < func , ID >
 14 --> < foo2 , ID >
 15 --> < foo3 , ID >
 24 --> < foo , ID >
 29 --> < var , ID >


Line 34: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int var(int a){
return a;
}


Line 34: unit : func_definition

int var(int a){
return a;
}



Line 34: program : program unit

int x,y,z;
float a;
int var(int a,int b);
int foo3(int a,int b);
int func(int c,int d){
return 7;
}

int correct_foo(int a,float b){
return a+3;
}

void foo(int a){
y=6;
}

int foo2(int a,int a,float b){
return a+2;
}

void foo3(int a,int b){
y=7;
}

int z(int d){
return d;
}

int var(int a){
return a;
}



Line 36: type_specifier : VOID

void

Line 36: type_specifier : INT

int

Line 36: parameter_list : type_specifier ID

int a

Line 37: variable : ID

a

Line 37: factor : variable

a

Line 37: unary_expression : factor

a

Line 37: term : unary_expression

a

Line 37: simple_expression : term

a

Line 37: factor : CONST_INT

3

Line 37: unary_expression : factor

3

Line 37: term : unary_expression

3

Line 37: simple_expression : simple_expression ADDOP term

a+3

Line 37: rel_expression : simple_expression

a+3

Line 37: logic_expression : rel_expression

a+3

Line 37: expression : logic expression

a+3

Line 37: statement : RETURN expression SEMICOLON

return a+3;


Line 37: statements : statement

return a+3;


Line 38: compound_statement : LCURL statements RCURL

{
return a+3;
}




ScopeTable # 1.10
 7 --> < a , ID > 



ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > 
 2 --> < z , ID > 
 3 --> < correct_foo , ID >
 7 --> < a , ID > 
 8 --> < func , ID >
 14 --> < foo2 , ID >
 15 --> < foo3 , ID >
 16 --> < foo4 , ID >
 24 --> < foo , ID >
 29 --> < var , ID >


Line 38: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

void foo4(int a){
return a+3;
}


Line 38: unit : func_definition

void foo4(int a){
return a+3;
}



Line 38: program : program unit

int x,y,z;
float a;
int var(int a,int b);
int foo3(int a,int b);
int func(int c,int d){
return 7;
}

int correct_foo(int a,float b){
return a+3;
}

void foo(int a){
y=6;
}

int foo2(int a,int a,float b){
return a+2;
}

void foo3(int a,int b){
y=7;
}

int z(int d){
return d;
}

int var(int a){
return a;
}

void foo4(int a){
return a+3;
}



Line 40: type_specifier : INT

int

Line 41: type_specifier : INT

int

Line 41: declaration_list : ID

a

Line 41: declaration_list : declaration_list COMMA ID

a,b

Line 41: declaration_list : declaration_list COMMA ID LTHIRD CONST_INT RTHIRD

a,b,c[4]

Line 41: declaration_list : declaration_list COMMA ID

a,b,c[4],dd

Line 41: declaration_list : declaration_list COMMA ID

a,b,c[4],dd,ee

Line 41: var_declaration : type_specifier declaration_list SEMICOLON

int a,b,c[4],dd,ee;

Line 41: statement : var_declaration

int a,b,c[4],dd,ee;


Line 41: statements : statement

int a,b,c[4],dd,ee;


Line 42: type_specifier : VOID

void

Line 42: declaration_list : ID

e

Line 42: var_declaration : type_specifier declaration_list SEMICOLON

Error at line 42: Variable type cannot be void

void e;

Line 42: statement : var_declaration

void e;


Line 42: statements : statements statement

int a,b,c[4],dd,ee;
void e;


Line 43: type_specifier : FLOAT

float

Error at line 43: Multiple declaration of a

Line 43: declaration_list : ID

a

Error at line 43: Multiple declaration of c

Line 43: declaration_list : declaration_list COMMA ID LTHIRD CONST_INT RTHIRD

a,c[7]

Line 43: var_declaration : type_specifier declaration_list SEMICOLON

float a,c[7];

Line 43: statement : var_declaration

float a,c[7];


Line 43: statements : statements statement

int a,b,c[4],dd,ee;
void e;
float a,c[7];


Line 45: factor : CONST_FLOAT

2.50

Line 45: unary_expression : factor

2.50

Line 45: term : unary_expression

2.50

Line 45: simple_expression : term

2.50

Line 45: rel_expression : simple_expression

2.50

Line 45: logic_expression : rel_expression

2.50

Line 45: arguments : logic_expression

2.50

Line 45: factor : CONST_FLOAT

3.50

Line 45: unary_expression : factor

3.50

Line 45: term : unary_expression

3.50

Line 45: simple_expression : term

3.50

Line 45: rel_expression : simple_expression

3.50

Line 45: logic_expression : rel_expression

3.50

Line 45: arguments : arguments COMMA logic_expression

2.50,3.50

Line 45: argument_list : arguments

2.50,3.50

Line 45: factor : ID LPAREN argument_list RPAREN

Error at line 45: 1th argument mismatch in function func

func(2.50,3.50)

Line 45: unary_expression : factor

func(2.50,3.50)

Line 45: term : unary_expression

func(2.50,3.50)

Line 45: simple_expression : term

func(2.50,3.50)

Line 45: rel_expression : simple_expression

func(2.50,3.50)

Line 45: logic_expression : rel_expression

func(2.50,3.50)

Line 45: expression : logic expression

func(2.50,3.50)

Line 45: expression_statement : expression SEMICOLON

func(2.50,3.50);

Line 45: statement : expression_statement

func(2.50,3.50);


Line 45: statements : statements statement

int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);


Line 48: variable : ID

a

Line 48: variable : ID

a

Line 48: factor : variable

a

Line 48: unary_expression : factor

a

Line 48: term : unary_expression

a

Line 48: simple_expression : term

a

Line 48: rel_expression : simple_expression

a

Line 48: logic_expression : rel_expression

a

Line 48: arguments : logic_expression

a

Line 48: variable : ID

Error at line 48: Type mismatch, c is an array

c

Line 48: factor : variable

c

Line 48: unary_expression : factor

c

Line 48: term : unary_expression

c

Line 48: simple_expression : term

c

Line 48: rel_expression : simple_expression

c

Line 48: logic_expression : rel_expression

c

Line 48: arguments : arguments COMMA logic_expression

a,c

Line 48: argument_list : arguments

a,c

Line 48: factor : ID LPAREN argument_list RPAREN

correct_foo(a,c)

Line 48: unary_expression : factor

correct_foo(a,c)

Line 48: term : unary_expression

correct_foo(a,c)

Line 48: simple_expression : term

correct_foo(a,c)

Line 48: rel_expression : simple_expression

correct_foo(a,c)

Line 48: logic_expression : rel_expression

correct_foo(a,c)

Line 48: expression : variable ASSIGNOP logic_expression

a=correct_foo(a,c)

Line 48: expression_statement : expression SEMICOLON

a=correct_foo(a,c);

Line 48: statement : expression_statement

a=correct_foo(a,c);


Line 48: statements : statements statement

int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);


Line 49: variable : ID

b

Line 49: variable : ID

a

Line 49: factor : variable

a

Line 49: unary_expression : factor

a

Line 49: term : unary_expression

a

Line 49: simple_expression : term

a

Line 49: rel_expression : simple_expression

a

Line 49: logic_expression : rel_expression

a

Line 49: arguments : logic_expression

a

Line 49: argument_list : arguments

a

Line 49: factor : ID LPAREN argument_list RPAREN

Error at line 49: Total number of arguments mismatch in function correct_foo

correct_foo(a)

Line 49: unary_expression : factor

correct_foo(a)

Line 49: term : unary_expression

correct_foo(a)

Line 49: simple_expression : term

correct_foo(a)

Line 49: rel_expression : simple_expression

correct_foo(a)

Line 49: logic_expression : rel_expression

correct_foo(a)

Line 49: expression : variable ASSIGNOP logic_expression

b=correct_foo(a)

Line 49: expression_statement : expression SEMICOLON

b=correct_foo(a);

Line 49: statement : expression_statement

b=correct_foo(a);


Line 49: statements : statements statement

int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);


Line 51: variable : ID

Error at line 51: Undeclared variable k

k

Line 51: factor : CONST_INT

5

Line 51: unary_expression : factor

5

Line 51: term : unary_expression

5

Line 51: simple_expression : term

5

Line 51: factor : CONST_INT

2

Line 51: unary_expression : factor

2

Line 51: term : unary_expression

2

Line 51: simple_expression : simple_expression ADDOP term

5+2

Line 51: rel_expression : simple_expression

5+2

Line 51: logic_expression : rel_expression

5+2

Line 51: expression : variable ASSIGNOP logic_expression

k=5+2

Line 51: expression_statement : expression SEMICOLON

k=5+2;

Line 51: statement : expression_statement

k=5+2;


Line 51: statements : statements statement

int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);
k=5+2;


Line 52: factor : CONST_INT

5

Line 52: unary_expression : factor

5

Line 52: term : unary_expression

5

Line 52: simple_expression : term

5

Line 52: rel_expression : simple_expression

5

Line 52: logic_expression : rel_expression

5

Line 52: expression : logic expression

5

Line 52: variable : ID LTHIRD expression RTHIRD

Error at line 52: b not an array

b[5]

Line 52: factor : CONST_INT

7

Line 52: unary_expression : factor

7

Line 52: term : unary_expression

7

Line 52: simple_expression : term

7

Line 52: rel_expression : simple_expression

7

Line 52: logic_expression : rel_expression

7

Line 52: expression : variable ASSIGNOP logic_expression

b[5]=7

Line 52: expression_statement : expression SEMICOLON

b[5]=7;

Line 52: statement : expression_statement

b[5]=7;


Line 52: statements : statements statement

int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);
k=5+2;
b[5]=7;


Line 53: factor : CONST_FLOAT

2.50

Line 53: unary_expression : factor

2.50

Line 53: term : unary_expression

2.50

Line 53: simple_expression : term

2.50

Line 53: rel_expression : simple_expression

2.50

Line 53: logic_expression : rel_expression

2.50

Line 53: expression : logic expression

2.50

Line 53: variable : ID LTHIRD expression RTHIRD

Error at line 53: Expression inside third brackets not an integer

c[2.50]

Line 53: factor : CONST_INT

8

Line 53: unary_expression : factor

8

Line 53: term : unary_expression

8

Line 53: simple_expression : term

8

Line 53: rel_expression : simple_expression

8

Line 53: logic_expression : rel_expression

8

Line 53: expression : variable ASSIGNOP logic_expression

c[2.50]=8

Line 53: expression_statement : expression SEMICOLON

c[2.50]=8;

Line 53: statement : expression_statement

c[2.50]=8;


Line 53: statements : statements statement

int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);
k=5+2;
b[5]=7;
c[2.50]=8;


Line 54: factor : CONST_INT

0

Line 54: unary_expression : factor

0

Line 54: term : unary_expression

0

Line 54: simple_expression : term

0

Line 54: rel_expression : simple_expression

0

Line 54: logic_expression : rel_expression

0

Line 54: expression : logic expression

0

Line 54: variable : ID LTHIRD expression RTHIRD

c[0]

Line 54: factor : CONST_INT

2

Line 54: unary_expression : factor

2

Line 54: term : unary_expression

2

Line 54: simple_expression : term

2

Line 54: factor : CONST_INT

5

Line 54: unary_expression : factor

5

Line 54: term : unary_expression

5

Line 54: factor : CONST_INT

7

Line 54: unary_expression : factor

7

Line 54: term : unary_expression

7

Line 54: simple_expression : term

7

Line 54: rel_expression : simple_expression

7

Line 54: logic_expression : rel_expression

7

Line 54: arguments : logic_expression

7

Line 54: argument_list : arguments

7

Line 54: factor : ID LPAREN argument_list RPAREN

foo4(7)

Line 54: unary_expression : factor

foo4(7)

Line 54: term : term MULOP unary_expression

Error at line 54: Void function used in expression

5*foo4(7)

Line 54: simple_expression : simple_expression ADDOP term

2+5*foo4(7)

Line 54: rel_expression : simple_expression

2+5*foo4(7)

Line 54: logic_expression : rel_expression

2+5*foo4(7)

Line 54: expression : variable ASSIGNOP logic_expression

c[0]=2+5*foo4(7)

Line 54: expression_statement : expression SEMICOLON

c[0]=2+5*foo4(7);

Line 54: statement : expression_statement

c[0]=2+5*foo4(7);


Line 54: statements : statements statement

int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);
k=5+2;
b[5]=7;
c[2.50]=8;
c[0]=2+5*foo4(7);


Line 55: factor : CONST_INT

1

Line 55: unary_expression : factor

1

Line 55: term : unary_expression

1

Line 55: simple_expression : term

1

Line 55: rel_expression : simple_expression

1

Line 55: logic_expression : rel_expression

1

Line 55: expression : logic expression

1

Line 55: variable : ID LTHIRD expression RTHIRD

c[1]

Line 55: factor : CONST_INT

5

Line 55: unary_expression : factor

5

Line 55: term : unary_expression

5

Line 55: simple_expression : term

5

Line 55: rel_expression : simple_expression

5

Line 55: logic_expression : rel_expression

5

Line 55: expression : variable ASSIGNOP logic_expression

c[1]=5

Line 55: expression_statement : expression SEMICOLON

c[1]=5;

Line 55: statement : expression_statement

c[1]=5;


Line 55: statements : statements statement

int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);
k=5+2;
b[5]=7;
c[2.50]=8;
c[0]=2+5*foo4(7);
c[1]=5;


Line 56: factor : CONST_INT

1

Line 56: unary_expression : factor

1

Line 56: term : unary_expression

1

Line 56: simple_expression : term

1

Line 56: rel_expression : simple_expression

1

Line 56: logic_expression : rel_expression

1

Line 56: expression : logic expression

1

Line 56: variable : ID LTHIRD expression RTHIRD

c[1]

Line 56: factor : variable

c[1]

Line 56: unary_expression : factor

c[1]

Line 56: term : unary_expression

c[1]

Line 56: simple_expression : term

c[1]

Line 56: rel_expression : simple_expression

c[1]

Line 56: logic_expression : rel_expression

c[1]

Line 56: arguments : logic_expression

c[1]

Line 56: argument_list : arguments

c[1]

Line 56: factor : ID LPAREN argument_list RPAREN

foo4(c[1])

Line 56: unary_expression : factor

foo4(c[1])

Line 56: term : unary_expression

foo4(c[1])

Line 56: simple_expression : term

foo4(c[1])

Line 56: rel_expression : simple_expression

foo4(c[1])

Line 56: logic_expression : rel_expression

foo4(c[1])

Line 56: expression : logic expression

foo4(c[1])

Line 56: expression_statement : expression SEMICOLON

foo4(c[1]);

Line 56: statement : expression_statement

foo4(c[1]);


Line 56: statements : statements statement

int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);
k=5+2;
b[5]=7;
c[2.50]=8;
c[0]=2+5*foo4(7);
c[1]=5;
foo4(c[1]);


Line 57: factor : CONST_INT

2

Line 57: unary_expression : factor

2

Line 57: term : unary_expression

2

Line 57: simple_expression : term

2

Line 57: rel_expression : simple_expression

2

Line 57: logic_expression : rel_expression

2

Line 57: expression : logic expression

2

Line 57: variable : ID LTHIRD expression RTHIRD

c[2]

Line 57: factor : CONST_INT

1

Line 57: unary_expression : factor

1

Line 57: term : unary_expression

1

Line 57: simple_expression : term

1

Line 57: rel_expression : simple_expression

1

Line 57: logic_expression : rel_expression

1

Line 57: expression : logic expression

1

Line 57: variable : ID LTHIRD expression RTHIRD

c[1]

Line 57: factor : variable

c[1]

Line 57: unary_expression : factor

c[1]

Line 57: term : unary_expression

c[1]

Line 57: simple_expression : term

c[1]

Line 57: rel_expression : simple_expression

c[1]

Line 57: logic_expression : rel_expression

c[1]

Line 57: arguments : logic_expression

c[1]

Line 57: argument_list : arguments

c[1]

Line 57: factor : ID LPAREN argument_list RPAREN

foo4(c[1])

Line 57: unary_expression : factor

foo4(c[1])

Line 57: term : unary_expression

foo4(c[1])

Line 57: simple_expression : term

foo4(c[1])

Line 57: rel_expression : simple_expression

foo4(c[1])

Line 57: logic_expression : rel_expression

foo4(c[1])

Line 57: expression : variable ASSIGNOP logic_expression

Error at line 57: Void function used in expression

c[2]=foo4(c[1])

Line 57: expression_statement : expression SEMICOLON

c[2]=foo4(c[1]);

Line 57: statement : expression_statement

c[2]=foo4(c[1]);


Line 57: statements : statements statement

int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);
k=5+2;
b[5]=7;
c[2.50]=8;
c[0]=2+5*foo4(7);
c[1]=5;
foo4(c[1]);
c[2]=foo4(c[1]);


Line 58: factor : CONST_INT

3

Line 58: unary_expression : factor

3

Line 58: term : unary_expression

3

Line 58: simple_expression : term

3

Line 58: rel_expression : simple_expression

3

Line 58: logic_expression : rel_expression

3

Line 58: expression : logic expression

3

Line 58: variable : ID LTHIRD expression RTHIRD

c[3]

Line 58: factor : CONST_FLOAT

2.70

Line 58: unary_expression : factor

2.70

Line 58: term : unary_expression

2.70

Line 58: simple_expression : term

2.70

Line 58: rel_expression : simple_expression

2.70

Line 58: logic_expression : rel_expression

2.70

Line 58: expression : variable ASSIGNOP logic_expression

Error at line 58: Type Mismatch

c[3]=2.70

Line 58: expression_statement : expression SEMICOLON

c[3]=2.70;

Line 58: statement : expression_statement

c[3]=2.70;


Line 58: statements : statements statement

int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);
k=5+2;
b[5]=7;
c[2.50]=8;
c[0]=2+5*foo4(7);
c[1]=5;
foo4(c[1]);
c[2]=foo4(c[1]);
c[3]=2.70;


Line 59: variable : ID

b

Line 59: factor : CONST_INT

5

Line 59: unary_expression : factor

5

Line 59: term : unary_expression

5

Line 59: factor : CONST_INT

0

Line 59: unary_expression : factor

0

Line 59: term : term MULOP unary_expression

Error at line 59: Modulus by Zero

5%0

Line 59: simple_expression : term

5%0

Line 59: rel_expression : simple_expression

5%0

Line 59: logic_expression : rel_expression

5%0

Line 59: expression : variable ASSIGNOP logic_expression

b=5%0

Line 59: expression_statement : expression SEMICOLON

b=5%0;

Line 59: statement : expression_statement

b=5%0;


Line 59: statements : statements statement

int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);
k=5+2;
b[5]=7;
c[2.50]=8;
c[0]=2+5*foo4(7);
c[1]=5;
foo4(c[1]);
c[2]=foo4(c[1]);
c[3]=2.70;
b=5%0;


Line 60: variable : ID

b

Line 60: factor : CONST_INT

2

Line 60: unary_expression : factor

2

Line 60: term : unary_expression

2

Line 60: factor : CONST_FLOAT

3.50

Line 60: unary_expression : factor

3.50

Line 60: term : term MULOP unary_expression

Error at line 60: Non-Integer operand on modulus operator

2%3.50

Line 60: simple_expression : term

2%3.50

Line 60: rel_expression : simple_expression

2%3.50

Line 60: logic_expression : rel_expression

2%3.50

Line 60: expression : variable ASSIGNOP logic_expression

b=2%3.50

Line 60: expression_statement : expression SEMICOLON

b=2%3.50;

Line 60: statement : expression_statement

b=2%3.50;


Line 60: statements : statements statement

int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);
k=5+2;
b[5]=7;
c[2.50]=8;
c[0]=2+5*foo4(7);
c[1]=5;
foo4(c[1]);
c[2]=foo4(c[1]);
c[3]=2.70;
b=5%0;
b=2%3.50;


Line 62: variable : ID

dd

Line 62: variable : ID

a

Line 62: factor : variable

a

Line 62: unary_expression : factor

a

Line 62: term : unary_expression

a

Line 62: simple_expression : term

a

Line 62: rel_expression : simple_expression

a

Line 62: logic_expression : rel_expression

a

Line 62: arguments : logic_expression

a

Line 62: argument_list : arguments

a

Line 62: factor : ID LPAREN argument_list RPAREN

Error at line 62: Undeclared function foo5

foo5(a)

Line 62: unary_expression : factor

foo5(a)

Line 62: term : unary_expression

foo5(a)

Line 62: simple_expression : term

foo5(a)

Line 62: rel_expression : simple_expression

foo5(a)

Line 62: logic_expression : rel_expression

foo5(a)

Line 62: expression : variable ASSIGNOP logic_expression

dd=foo5(a)

Line 62: expression_statement : expression SEMICOLON

dd=foo5(a);

Line 62: statement : expression_statement

dd=foo5(a);


Line 62: statements : statements statement

int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);
k=5+2;
b[5]=7;
c[2.50]=8;
c[0]=2+5*foo4(7);
c[1]=5;
foo4(c[1]);
c[2]=foo4(c[1]);
c[3]=2.70;
b=5%0;
b=2%3.50;
dd=foo5(a);


Line 67: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

Error at line 67: Undeclared variable h

printf(h);


Line 67: statements : statements statement

int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);
k=5+2;
b[5]=7;
c[2.50]=8;
c[0]=2+5*foo4(7);
c[1]=5;
foo4(c[1]);
c[2]=foo4(c[1]);
c[3]=2.70;
b=5%0;
b=2%3.50;
dd=foo5(a);
printf(h);


Line 68: factor : CONST_INT

0

Line 68: unary_expression : factor

0

Line 68: term : unary_expression

0

Line 68: simple_expression : term

0

Line 68: rel_expression : simple_expression

0

Line 68: logic_expression : rel_expression

0

Line 68: expression : logic expression

0

Line 68: statement : RETURN expression SEMICOLON

return 0;


Line 68: statements : statements statement

int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);
k=5+2;
b[5]=7;
c[2.50]=8;
c[0]=2+5*foo4(7);
c[1]=5;
foo4(c[1]);
c[2]=foo4(c[1]);
c[3]=2.70;
b=5%0;
b=2%3.50;
dd=foo5(a);
printf(h);
return 0;


Line 71: compound_statement : LCURL statements RCURL

{
int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);
k=5+2;
b[5]=7;
c[2.50]=8;
c[0]=2+5*foo4(7);
c[1]=5;
foo4(c[1]);
c[2]=foo4(c[1]);
c[3]=2.70;
b=5%0;
b=2%3.50;
dd=foo5(a);
printf(h);
return 0;
}




ScopeTable # 1.11
 7 --> < a , ID > 
 8 --> < b , ID > 
 9 --> < c , ID > 
 20 --> < dd , ID > 
 22 --> < ee , ID > 



ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > < main , ID >
 2 --> < z , ID > 
 3 --> < correct_foo , ID >
 7 --> < a , ID > 
 8 --> < func , ID >
 14 --> < foo2 , ID >
 15 --> < foo3 , ID >
 16 --> < foo4 , ID >
 24 --> < foo , ID >
 29 --> < var , ID >


Line 71: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);
k=5+2;
b[5]=7;
c[2.50]=8;
c[0]=2+5*foo4(7);
c[1]=5;
foo4(c[1]);
c[2]=foo4(c[1]);
c[3]=2.70;
b=5%0;
b=2%3.50;
dd=foo5(a);
printf(h);
return 0;
}


Line 71: unit : func_definition

int main(){
int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);
k=5+2;
b[5]=7;
c[2.50]=8;
c[0]=2+5*foo4(7);
c[1]=5;
foo4(c[1]);
c[2]=foo4(c[1]);
c[3]=2.70;
b=5%0;
b=2%3.50;
dd=foo5(a);
printf(h);
return 0;
}



Line 71: program : program unit

int x,y,z;
float a;
int var(int a,int b);
int foo3(int a,int b);
int func(int c,int d){
return 7;
}

int correct_foo(int a,float b){
return a+3;
}

void foo(int a){
y=6;
}

int foo2(int a,int a,float b){
return a+2;
}

void foo3(int a,int b){
y=7;
}

int z(int d){
return d;
}

int var(int a){
return a;
}

void foo4(int a){
return a+3;
}

int main(){
int a,b,c[4],dd,ee;
void e;
float a,c[7];
func(2.50,3.50);
a=correct_foo(a,c);
b=correct_foo(a);
k=5+2;
b[5]=7;
c[2.50]=8;
c[0]=2+5*foo4(7);
c[1]=5;
foo4(c[1]);
c[2]=foo4(c[1]);
c[3]=2.70;
b=5%0;
b=2%3.50;
dd=foo5(a);
printf(h);
return 0;
}



Line 71: start : program



ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > < main , ID >
 2 --> < z , ID > 
 3 --> < correct_foo , ID >
 7 --> < a , ID > 
 8 --> < func , ID >
 14 --> < foo2 , ID >
 15 --> < foo3 , ID >
 16 --> < foo4 , ID >
 24 --> < foo , ID >
 29 --> < var , ID >


Total lines: 71
Total errors: 20

