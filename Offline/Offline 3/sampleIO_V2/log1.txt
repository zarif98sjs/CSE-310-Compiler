Line 1: type_specifier : INT

int

Line 1: declaration_list : ID

x

Line 1: declaration_list : declaration_list COMMA ID

x,y

Line 1: declaration_list : declaration_list COMMA ID

x,y,z

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int x,y,z;

Line 1: unit : var_declaration

int x,y,z;


Line 1: program : unit

int x,y,z;


Line 1: type_specifier : FLOAT

float

Line 1: declaration_list : ID

a

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

float a;

Line 1: unit : var_declaration

float a;


Line 1: program : program unit

int x,y,z;
float a;


Line 3: type_specifier : VOID

void

Line 3: func_declaration : type_specifier ID LPAREN RPAREN SEMICOLON

void foo();


Line 3: unit : func_declaration

void foo();


Line 3: program : program unit

int x,y,z;
float a;
void foo();


Line 5: type_specifier : INT

int

Line 5: type_specifier : INT

int

Line 5: parameter_list : type_specifier ID

int a

Line 5: type_specifier : INT

int

Line 5: parameter_list : parameter_list COMMA type_specifier ID

int a,int b

Line 6: variable : ID

a

Line 6: factor : variable

a

Line 6: unary_expression : factor

a

Line 6: term : unary_expression

a

Line 6: simple_expression : term

a

Line 6: variable : ID

b

Line 6: factor : variable

b

Line 6: unary_expression : factor

b

Line 6: term : unary_expression

b

Line 6: simple_expression : simple_expression ADDOP term

a+b

Line 6: rel_expression : simple_expression

a+b

Line 6: logic_expression : rel_expression

a+b

Line 6: expression : logic expression

a+b

Line 6: statement : RETURN expression SEMICOLON

return a+b;


Line 6: statements : statement

return a+b;


Line 7: compound_statement : LCURL statements RCURL

{
return a+b;
}




ScopeTable # 1.2
 7 --> < a , ID > 
 8 --> < b , ID > 



ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > 
 2 --> < z , ID > 
 7 --> < a , ID > 
 24 --> < foo , ID >
 29 --> < var , ID >


Line 7: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int var(int a,int b){
return a+b;
}


Line 7: unit : func_definition

int var(int a,int b){
return a+b;
}



Line 7: program : program unit

int x,y,z;
float a;
void foo();
int var(int a,int b){
return a+b;
}



Line 9: type_specifier : VOID

void

Line 10: variable : ID

x

Line 10: factor : CONST_INT

2

Line 10: unary_expression : factor

2

Line 10: term : unary_expression

2

Line 10: simple_expression : term

2

Line 10: rel_expression : simple_expression

2

Line 10: logic_expression : rel_expression

2

Line 10: expression : variable ASSIGNOP logic_expression

x=2

Line 10: expression_statement : expression SEMICOLON

x=2;

Line 10: statement : expression_statement

x=2;


Line 10: statements : statement

x=2;


Line 11: variable : ID

y

Line 11: variable : ID

x

Line 11: factor : variable

x

Line 11: unary_expression : factor

x

Line 11: term : unary_expression

x

Line 11: simple_expression : term

x

Line 11: factor : CONST_INT

5

Line 11: unary_expression : factor

5

Line 11: term : unary_expression

5

Line 11: simple_expression : simple_expression ADDOP term

x-5

Line 11: rel_expression : simple_expression

x-5

Line 11: logic_expression : rel_expression

x-5

Line 11: expression : variable ASSIGNOP logic_expression

y=x-5

Line 11: expression_statement : expression SEMICOLON

y=x-5;

Line 11: statement : expression_statement

y=x-5;


Line 11: statements : statements statement

x=2;
y=x-5;


Line 12: compound_statement : LCURL statements RCURL

{
x=2;
y=x-5;
}




ScopeTable # 1.3



ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > 
 2 --> < z , ID > 
 7 --> < a , ID > 
 24 --> < foo , ID >
 29 --> < var , ID >


Line 12: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void foo(){
x=2;
y=x-5;
}


Line 12: unit : func_definition

void foo(){
x=2;
y=x-5;
}



Line 12: program : program unit

int x,y,z;
float a;
void foo();
int var(int a,int b){
return a+b;
}

void foo(){
x=2;
y=x-5;
}



Line 14: type_specifier : INT

int

Line 15: type_specifier : INT

int

Line 15: declaration_list : ID LTHIRD CONST_INT RTHIRD

a[2]

Line 15: declaration_list : declaration_list COMMA ID

a[2],c

Line 15: declaration_list : declaration_list COMMA ID

a[2],c,i

Line 15: declaration_list : declaration_list COMMA ID

a[2],c,i,j

Line 15: var_declaration : type_specifier declaration_list SEMICOLON

int a[2],c,i,j;

Line 15: statement : var_declaration

int a[2],c,i,j;


Line 15: statements : statement

int a[2],c,i,j;


Line 15: type_specifier : FLOAT

float

Line 15: declaration_list : ID

d

Line 15: var_declaration : type_specifier declaration_list SEMICOLON

float d;

Line 15: statement : var_declaration

float d;


Line 15: statements : statements statement

int a[2],c,i,j;
float d;


Line 16: factor : CONST_INT

0

Line 16: unary_expression : factor

0

Line 16: term : unary_expression

0

Line 16: simple_expression : term

0

Line 16: rel_expression : simple_expression

0

Line 16: logic_expression : rel_expression

0

Line 16: expression : logic expression

0

Line 16: variable : ID LTHIRD expression RTHIRD

a[0]

Line 16: factor : variable

a[0]

Line 16: unary_expression : factor

a[0]

Line 16: term : unary_expression

a[0]

Line 16: simple_expression : term

a[0]

Line 16: rel_expression : simple_expression

a[0]

Line 16: logic_expression : rel_expression

a[0]

Line 16: expression : logic expression

a[0]

Line 16: expression_statement : expression SEMICOLON

a[0];

Line 16: statement : expression_statement

a[0];


Line 16: statements : statements statement

int a[2],c,i,j;
float d;
a[0];


Line 17: factor : CONST_INT

1

Line 17: unary_expression : factor

1

Line 17: term : unary_expression

1

Line 17: simple_expression : term

1

Line 17: rel_expression : simple_expression

1

Line 17: logic_expression : rel_expression

1

Line 17: expression : logic expression

1

Line 17: variable : ID LTHIRD expression RTHIRD

a[1]

Line 17: factor : CONST_INT

5

Line 17: unary_expression : factor

5

Line 17: term : unary_expression

5

Line 17: simple_expression : term

5

Line 17: rel_expression : simple_expression

5

Line 17: logic_expression : rel_expression

5

Line 17: expression : variable ASSIGNOP logic_expression

a[1]=5

Line 17: expression_statement : expression SEMICOLON

a[1]=5;

Line 17: statement : expression_statement

a[1]=5;


Line 17: statements : statements statement

int a[2],c,i,j;
float d;
a[0];
a[1]=5;


Line 18: variable : ID

i

Line 18: factor : CONST_INT

0

Line 18: unary_expression : factor

0

Line 18: term : unary_expression

0

Line 18: simple_expression : term

0

Line 18: rel_expression : simple_expression

0

Line 18: logic_expression : rel_expression

0

Line 18: expression : logic expression

0

Line 18: variable : ID LTHIRD expression RTHIRD

a[0]

Line 18: factor : variable

a[0]

Line 18: unary_expression : factor

a[0]

Line 18: term : unary_expression

a[0]

Line 18: simple_expression : term

a[0]

Line 18: factor : CONST_INT

1

Line 18: unary_expression : factor

1

Line 18: term : unary_expression

1

Line 18: simple_expression : term

1

Line 18: rel_expression : simple_expression

1

Line 18: logic_expression : rel_expression

1

Line 18: expression : logic expression

1

Line 18: variable : ID LTHIRD expression RTHIRD

a[1]

Line 18: factor : variable

a[1]

Line 18: unary_expression : factor

a[1]

Line 18: term : unary_expression

a[1]

Line 18: simple_expression : simple_expression ADDOP term

a[0]+a[1]

Line 18: rel_expression : simple_expression

a[0]+a[1]

Line 18: logic_expression : rel_expression

a[0]+a[1]

Line 18: expression : variable ASSIGNOP logic_expression

i=a[0]+a[1]

Line 18: expression_statement : expression SEMICOLON

i=a[0]+a[1];

Line 18: statement : expression_statement

i=a[0]+a[1];


Line 18: statements : statements statement

int a[2],c,i,j;
float d;
a[0];
a[1]=5;
i=a[0]+a[1];


Line 19: variable : ID

j

Line 19: factor : CONST_INT

2

Line 19: unary_expression : factor

2

Line 19: term : unary_expression

2

Line 19: factor : CONST_INT

3

Line 19: unary_expression : factor

3

Line 19: term : term MULOP unary_expression

2*3

Line 19: simple_expression : term

2*3

Line 19: factor : CONST_INT

5

Line 19: unary_expression : factor

5

Line 19: term : unary_expression

5

Line 19: factor : CONST_INT

3

Line 19: unary_expression : factor

3

Line 19: term : term MULOP unary_expression

5%3

Line 19: simple_expression : term

5%3

Line 19: factor : CONST_INT

4

Line 19: unary_expression : factor

4

Line 19: term : unary_expression

4

Line 19: simple_expression : term

4

Line 19: rel_expression : simple_expression RELOP simple_expression

5%3<4

Line 19: factor : CONST_INT

8

Line 19: unary_expression : factor

8

Line 19: term : unary_expression

8

Line 19: simple_expression : term

8

Line 19: rel_expression : simple_expression

8

Line 19: logic_expression : rel_expression LOGICOP rel_expression

5%3<4&&8

Line 19: expression : logic expression

5%3<4&&8

Line 19: factor : LPAREN expression RPAREN

(5%3<4&&8)

Line 19: unary_expression : factor

(5%3<4&&8)

Line 19: term : unary_expression

(5%3<4&&8)

Line 19: simple_expression : simple_expression ADDOP term

2*3+(5%3<4&&8)

Line 19: rel_expression : simple_expression

2*3+(5%3<4&&8)

Line 19: factor : CONST_INT

2

Line 19: unary_expression : factor

2

Line 19: term : unary_expression

2

Line 19: simple_expression : term

2

Line 19: rel_expression : simple_expression

2

Line 19: logic_expression : rel_expression LOGICOP rel_expression

2*3+(5%3<4&&8)||2

Line 19: expression : variable ASSIGNOP logic_expression

j=2*3+(5%3<4&&8)||2

Line 19: expression_statement : expression SEMICOLON

j=2*3+(5%3<4&&8)||2;

Line 19: statement : expression_statement

j=2*3+(5%3<4&&8)||2;


Line 19: statements : statements statement

int a[2],c,i,j;
float d;
a[0];
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;


Line 20: variable : ID

d

Line 20: factor : CONST_INT

1

Line 20: unary_expression : factor

1

Line 20: term : unary_expression

1

Line 20: simple_expression : term

1

Line 20: rel_expression : simple_expression

1

Line 20: logic_expression : rel_expression

1

Line 20: arguments : logic_expression

1

Line 20: factor : CONST_INT

2

Line 20: unary_expression : factor

2

Line 20: term : unary_expression

2

Line 20: factor : CONST_INT

3

Line 20: unary_expression : factor

3

Line 20: term : term MULOP unary_expression

2*3

Line 20: simple_expression : term

2*3

Line 20: rel_expression : simple_expression

2*3

Line 20: logic_expression : rel_expression

2*3

Line 20: arguments : arguments COMMA logic_expression

1,2*3

Line 20: argument_list : arguments

1,2*3

Line 20: factor : ID LPAREN argument_list RPAREN

var(1,2*3)

Line 20: unary_expression : factor

var(1,2*3)

Line 20: term : unary_expression

var(1,2*3)

Line 20: simple_expression : term

var(1,2*3)

Line 20: factor : CONST_FLOAT

3.50

Line 20: unary_expression : factor

3.50

Line 20: term : unary_expression

3.50

Line 20: factor : CONST_INT

2

Line 20: unary_expression : factor

2

Line 20: term : term MULOP unary_expression

3.50*2

Line 20: simple_expression : simple_expression ADDOP term

var(1,2*3)+3.50*2

Line 20: rel_expression : simple_expression

var(1,2*3)+3.50*2

Line 20: logic_expression : rel_expression

var(1,2*3)+3.50*2

Line 20: expression : variable ASSIGNOP logic_expression

d=var(1,2*3)+3.50*2

Line 20: expression_statement : expression SEMICOLON

d=var(1,2*3)+3.50*2;

Line 20: statement : expression_statement

d=var(1,2*3)+3.50*2;


Line 20: statements : statements statement

int a[2],c,i,j;
float d;
a[0];
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.50*2;


Line 21: factor : CONST_INT

0

Line 21: unary_expression : factor

0

Line 21: term : unary_expression

0

Line 21: simple_expression : term

0

Line 21: rel_expression : simple_expression

0

Line 21: logic_expression : rel_expression

0

Line 21: expression : logic expression

0

Line 21: statement : RETURN expression SEMICOLON

return 0;


Line 21: statements : statements statement

int a[2],c,i,j;
float d;
a[0];
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.50*2;
return 0;


Line 22: compound_statement : LCURL statements RCURL

{
int a[2],c,i,j;
float d;
a[0];
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.50*2;
return 0;
}




ScopeTable # 1.4
 7 --> < a , ID > 
 9 --> < c , ID > 
 10 --> < d , ID > 
 15 --> < i , ID > 
 16 --> < j , ID > 



ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > < main , ID >
 2 --> < z , ID > 
 7 --> < a , ID > 
 24 --> < foo , ID >
 29 --> < var , ID >


Line 22: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a[2],c,i,j;
float d;
a[0];
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.50*2;
return 0;
}


Line 22: unit : func_definition

int main(){
int a[2],c,i,j;
float d;
a[0];
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.50*2;
return 0;
}



Line 22: program : program unit

int x,y,z;
float a;
void foo();
int var(int a,int b){
return a+b;
}

void foo(){
x=2;
y=x-5;
}

int main(){
int a[2],c,i,j;
float d;
a[0];
a[1]=5;
i=a[0]+a[1];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.50*2;
return 0;
}



Line 22: start : program



ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > < main , ID >
 2 --> < z , ID > 
 7 --> < a , ID > 
 24 --> < foo , ID >
 29 --> < var , ID >


Total lines: 22
Total errors: 0

