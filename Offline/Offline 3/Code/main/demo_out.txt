Line 1: type_specifier : INT

int

Line 1: type_specifier : VOID

void

Line 1: parameter_list : type_specifier ID

void b

Line 1: type_specifier : INT

int

Line 1: parameter_list : parameter_list COMMA type_specifier ID

void b,int a

Line 2: variable : ID

Error at line 2: Undeclared variable y

y

Line 2: factor : CONST_INT

5

Line 2: unary_expression : factor

5

Line 2: term : unary_expression

5

Line 2: simple_expression : term

5

Line 2: rel_expression : simple_expression

5

Line 2: logic_expression : rel_expression

5

Line 2: expression : variable ASSIGNOP logic_expression

NULL ---- int
y=5

Line 2: expression_statement : expression SEMICOLON

y=5;

Line 2: statement : expression_statement

y=5;

Line 2: statements : statement

y=5;

Line 3: compound_statement : LCURL statements RCURL

{
y=5;
}

ScopeTable # 1.1
7 --> < a , ID > 
8 --> < b , ID > 

ScopeTable # 1
8 --> < func , ID > 


Line 3: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int func(void b,int a){
y=5;
}

Line 3: unit : func_definition

int func(void b,int a){
y=5;
}

Line 3: program : unit

int func(void b,int a){
y=5;
}

Line 4: type_specifier : INT

int

Line 5: factor : CONST_INT

5

Line 5: unary_expression : factor

5

Line 5: term : unary_expression

5

Line 5: simple_expression : term

5

Line 5: rel_expression : simple_expression

5

Line 5: logic_expression : rel_expression

5

Line 5: arguments : logic_expression

5

Line 5: factor : CONST_INT

6

Line 5: unary_expression : factor

6

Line 5: term : unary_expression

6

Line 5: simple_expression : term

6

Line 5: rel_expression : simple_expression

6

Line 5: logic_expression : rel_expression

6

Line 5: arguments : arguments COMMA logic_expression

5,6

Line 5: argument_list : arguments

5,6

Line 5: factor : ID LPAREN argument_list RPAREN

OG Param : void , int , 
Called Args : int , int , 
Error at line 5: 1th argument mismatch in function func

func(5,6)

Line 5: unary_expression : factor

func(5,6)

Line 5: term : unary_expression

func(5,6)

Line 5: simple_expression : term

func(5,6)

Line 5: rel_expression : simple_expression

func(5,6)

Line 5: logic_expression : rel_expression

func(5,6)

Line 5: expression : logic_expression

func(5,6)

Line 5: expression_statement : expression SEMICOLON

func(5,6);

Line 5: statement : expression_statement

func(5,6);

Line 5: statements : statement

func(5,6);

Line 6: factor : CONST_INT

0

Line 6: unary_expression : factor

0

Line 6: term : unary_expression

0

Line 6: simple_expression : term

0

Line 6: rel_expression : simple_expression

0

Line 6: logic_expression : rel_expression

0

Line 6: expression : logic_expression

0

Line 6: statement : RETURN expression SEMICOLON

return 0;

Line 6: statements : statements statement

func(5,6);
return 0;

Line 7: compound_statement : LCURL statements RCURL

{
func(5,6);
return 0;
}

ScopeTable # 1.2

ScopeTable # 1
1 --> < main , ID > 
8 --> < func , ID > 


Line 7: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
func(5,6);
return 0;
}

Line 7: unit : func_definition

int main(){
func(5,6);
return 0;
}

Line 7: program : program unit

int func(void b,int a){
y=5;
}
int main(){
func(5,6);
return 0;
}

Line 7: start : program

ScopeTable # 1
1 --> < main , ID > 
8 --> < func , ID > 


Total lines: 7
Total errors: 2
