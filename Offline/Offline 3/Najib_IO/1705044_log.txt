Line 1: type_specifier : INT

int 

Line 1: declaration_list : ID

a

Line 1: declaration_list : declaration_list COMMA ID

a,b

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int a,b;


Line 1: unit : var_declaration

int a,b;


Line 1: program : unit

int a,b;


Line 1: type_specifier : FLOAT

float 

Line 1: declaration_list : ID

c

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

float c;


Line 1: unit : var_declaration

float c;


Line 1: program : program unit

int a,b;
float c;


Line 3: type_specifier : FLOAT

float 

Line 3: type_specifier : FLOAT

float 

Line 3: parameter_list : type_specifier ID

float a

Line 4: variable : ID

a

Line 4: factor : variable

a

Line 4: unary_expression : factor

a

Line 4: term : unary_expression

a

Line 4: simple_expression : term

a

Line 4: rel_expression : simple_expression

a

Line 4: logic_expression : rel_expression

a

Line 4: expression : logic_expression

a

Line 4: statement : RETURN expression SEMICOLON

return a;


Line 4: statements : statement

return a;


Line 5: compound_statement : LCURL statements RCURL

{
return a;
}



ScopeTable # 1.1
 7 --> < a : ID> 

ScopeTable # 1
 7 --> < a : ID> 
 8 --> < b : ID> 
 9 --> < c : ID> 
 27 --> < func1 : ID> 

ScopeTable with id 1.1 removed
Line 5: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

float func1(float a){
return a;
}



Line 5: unit : func_definition

float func1(float a){
return a;
}



Line 5: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}



Line 7: type_specifier : INT

int 

Line 7: type_specifier : INT

int 

Line 7: parameter_list : type_specifier ID

int a

Line 7: type_specifier : FLOAT

float 

Line 7: parameter_list : parameter_list COMMA type_specifier ID

int a,float b

Line 7: type_specifier : INT

int 

Line 7: parameter_list : parameter_list COMMA type_specifier ID

int a,float b,int c

Line 8: variable : ID

a

Line 8: factor : variable

a

Line 8: unary_expression : factor

a

Line 8: term : unary_expression

a

Line 8: simple_expression : term

a

Line 8: rel_expression : simple_expression

a

Line 8: logic_expression : rel_expression

a

Line 8: expression : logic_expression

a

Line 8: statement : RETURN expression SEMICOLON

return a;


Line 8: statements : statement

return a;


Line 9: compound_statement : LCURL statements RCURL

{
return a;
}



ScopeTable # 1.2
 7 --> < a : ID> 
 8 --> < b : ID> 
 9 --> < c : ID> 

ScopeTable # 1
 7 --> < a : ID> 
 8 --> < b : ID> 
 9 --> < c : ID> 
 27 --> < func1 : ID> 
 28 --> < func2 : ID> 

ScopeTable with id 1.2 removed
Line 9: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int func2(int a,float b,int c){
return a;
}



Line 9: unit : func_definition

int func2(int a,float b,int c){
return a;
}



Line 9: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}

int func2(int a,float b,int c){
return a;
}



Line 11: type_specifier : VOID

void 

Line 12: type_specifier : INT

int 

Line 12: declaration_list : ID

a

Line 12: var_declaration : type_specifier declaration_list SEMICOLON

int a;


Line 12: statement : var_declaration

int a;


Line 12: statements : statement

int a;


Line 13: compound_statement : LCURL statements RCURL

{
int a;
}



ScopeTable # 1.3
 7 --> < a : ID> 

ScopeTable # 1
 7 --> < a : ID> 
 8 --> < b : ID> 
 9 --> < c : ID> 
 27 --> < func1 : ID> 
 28 --> < func2 : ID> 
 29 --> < func3 : ID> 

ScopeTable with id 1.3 removed
Line 13: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void func3(){
int a;
}



Line 13: unit : func_definition

void func3(){
int a;
}



Line 13: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}

int func2(int a,float b,int c){
return a;
}

void func3(){
int a;
}



Line 15: type_specifier : INT

int 

Line 16: type_specifier : INT

int 

Line 16: declaration_list : ID LTHIRD CONST_INT RTHIRD

arr[10]

Line 16: var_declaration : type_specifier declaration_list SEMICOLON

int arr[10];


Line 16: statement : var_declaration

int arr[10];


Line 16: statements : statement

int arr[10];


Line 18: variable : ID

a

Line 18: factor : CONST_INT

10

Line 18: unary_expression : factor

10

Line 18: term : unary_expression

10

Line 18: simple_expression : term

10

Line 18: rel_expression : simple_expression

10

Line 18: logic_expression : rel_expression

10

Line 18: expression : variable ASSIGNOP logic_expression

a=10

Line 18: expression_statement : expression SEMICOLON

a=10;


Line 18: statement : expression_statement

a=10;


Line 18: statements : statements statement

int arr[10];
a=10;


Line 19: variable : ID

a

Line 19: factor : CONST_FLOAT

10.0

Line 19: unary_expression : factor

10.0

Line 19: term : unary_expression

10.0

Line 19: simple_expression : term

10.0

Line 19: rel_expression : simple_expression

10.0

Line 19: logic_expression : rel_expression

10.0

Error at line 19: Type Mismatch

Line 19: expression : variable ASSIGNOP logic_expression

a=10.0

Line 19: expression_statement : expression SEMICOLON

a=10.0;


Line 19: statement : expression_statement

a=10.0;


Line 19: statements : statements statement

int arr[10];
a=10;
a=10.0;


Line 20: variable : ID

c

Line 20: factor : CONST_INT

10

Line 20: unary_expression : factor

10

Line 20: term : unary_expression

10

Line 20: simple_expression : term

10

Line 20: rel_expression : simple_expression

10

Line 20: logic_expression : rel_expression

10

Line 20: expression : variable ASSIGNOP logic_expression

c=10

Line 20: expression_statement : expression SEMICOLON

c=10;


Line 20: statement : expression_statement

c=10;


Line 20: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;


Line 21: variable : ID

a

Line 21: variable : ID

c

Line 21: factor : variable

c

Line 21: unary_expression : factor

c

Line 21: term : unary_expression

c

Line 21: simple_expression : term

c

Line 21: rel_expression : simple_expression

c

Line 21: logic_expression : rel_expression

c

Line 21: arguments : logic_expression

c

Line 21: argument_list : arguments

c

Line 21: factor : ID LPAREN argument_list RPAREN

func1(c)

Line 21: unary_expression : factor

func1(c)

Line 21: term : unary_expression

func1(c)

Line 21: simple_expression : term

func1(c)

Line 21: rel_expression : simple_expression

func1(c)

Line 21: logic_expression : rel_expression

func1(c)

Error at line 21: Type Mismatch

Line 21: expression : variable ASSIGNOP logic_expression

a=func1(c)

Line 21: expression_statement : expression SEMICOLON

a=func1(c);


Line 21: statement : expression_statement

a=func1(c);


Line 21: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);


Line 22: variable : ID

a

Line 22: variable : ID

c

Line 22: factor : variable

c

Line 22: unary_expression : factor

c

Line 22: term : unary_expression

c

Line 22: simple_expression : term

c

Line 22: rel_expression : simple_expression

c

Line 22: logic_expression : rel_expression

c

Error at line 22: Type Mismatch

Line 22: expression : variable ASSIGNOP logic_expression

a=c

Line 22: expression_statement : expression SEMICOLON

a=c;


Line 22: statement : expression_statement

a=c;


Line 22: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;


Line 23: variable : ID

c

Line 23: variable : ID

c

Line 23: factor : variable

c

Line 23: unary_expression : factor

c

Line 23: term : unary_expression

c

Line 23: simple_expression : term

c

Line 23: variable : ID

c

Line 23: factor : variable

c

Line 23: unary_expression : factor

c

Line 23: term : unary_expression

c

Line 23: simple_expression : term

c

Line 23: rel_expression : simple_expression

c

Line 23: logic_expression : rel_expression

c

Line 23: arguments : logic_expression

c

Line 23: argument_list : arguments

c

Line 23: factor : ID LPAREN argument_list RPAREN

func1(c)

Line 23: unary_expression : factor

func1(c)

Line 23: term : unary_expression

func1(c)

Line 23: simple_expression : simple_expression ADDOP term

c+func1(c)

Line 23: variable : ID

a

Line 23: factor : variable

a

Line 23: unary_expression : factor

a

Line 23: term : unary_expression

a

Line 23: simple_expression : simple_expression ADDOP term

c+func1(c)+a

Line 23: variable : ID

b

Line 23: factor : variable

b

Line 23: unary_expression : factor

b

Line 23: term : unary_expression

b

Line 23: simple_expression : simple_expression ADDOP term

c+func1(c)+a+b

Line 23: rel_expression : simple_expression

c+func1(c)+a+b

Line 23: logic_expression : rel_expression

c+func1(c)+a+b

Line 23: expression : variable ASSIGNOP logic_expression

c=c+func1(c)+a+b

Line 23: expression_statement : expression SEMICOLON

c=c+func1(c)+a+b;


Line 23: statement : expression_statement

c=c+func1(c)+a+b;


Line 23: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;


Line 24: variable : ID

a

Line 24: variable : ID

c

Line 24: factor : variable

c

Line 24: unary_expression : factor

c

Line 24: term : unary_expression

c

Line 24: simple_expression : term

c

Line 24: variable : ID

c

Line 24: factor : variable

c

Line 24: unary_expression : factor

c

Line 24: term : unary_expression

c

Line 24: simple_expression : term

c

Line 24: rel_expression : simple_expression

c

Line 24: logic_expression : rel_expression

c

Line 24: arguments : logic_expression

c

Line 24: argument_list : arguments

c

Line 24: factor : ID LPAREN argument_list RPAREN

func1(c)

Line 24: unary_expression : factor

func1(c)

Line 24: term : unary_expression

func1(c)

Line 24: simple_expression : simple_expression ADDOP term

c+func1(c)

Line 24: variable : ID

a

Line 24: factor : variable

a

Line 24: unary_expression : factor

a

Line 24: term : unary_expression

a

Line 24: simple_expression : simple_expression ADDOP term

c+func1(c)+a

Line 24: variable : ID

b

Line 24: factor : variable

b

Line 24: unary_expression : factor

b

Line 24: term : unary_expression

b

Line 24: simple_expression : simple_expression ADDOP term

c+func1(c)+a+b

Line 24: rel_expression : simple_expression

c+func1(c)+a+b

Line 24: logic_expression : rel_expression

c+func1(c)+a+b

Error at line 24: Type Mismatch

Line 24: expression : variable ASSIGNOP logic_expression

a=c+func1(c)+a+b

Line 24: expression_statement : expression SEMICOLON

a=c+func1(c)+a+b;


Line 24: statement : expression_statement

a=c+func1(c)+a+b;


Line 24: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;


Line 26: variable : ID

a

Line 26: factor : CONST_INT

10

Line 26: unary_expression : factor

10

Line 26: term : unary_expression

10

Line 26: simple_expression : term

10

Line 26: rel_expression : simple_expression

10

Line 26: logic_expression : rel_expression

10

Line 26: expression : logic_expression

10

Line 26: variable : ID LTHIRD expression RTHIRD

arr[10]

Line 26: factor : variable

arr[10]

Line 26: unary_expression : factor

arr[10]

Line 26: term : unary_expression

arr[10]

Line 26: simple_expression : term

arr[10]

Line 26: rel_expression : simple_expression

arr[10]

Line 26: logic_expression : rel_expression

arr[10]

Line 26: expression : variable ASSIGNOP logic_expression

a=arr[10]

Line 26: expression_statement : expression SEMICOLON

a=arr[10];


Line 26: statement : expression_statement

a=arr[10];


Line 26: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];


Line 27: variable : ID

a

Line 27: factor : CONST_FLOAT

1.10

Line 27: unary_expression : factor

1.10

Line 27: term : unary_expression

1.10

Line 27: simple_expression : term

1.10

Line 27: rel_expression : simple_expression

1.10

Line 27: logic_expression : rel_expression

1.10

Line 27: expression : logic_expression

1.10

Error at line 27: Expression inside third brackets not an integer

Line 27: variable : ID LTHIRD expression RTHIRD

arr[1.10]

Line 27: factor : variable

arr[1.10]

Line 27: unary_expression : factor

arr[1.10]

Line 27: term : unary_expression

arr[1.10]

Line 27: simple_expression : term

arr[1.10]

Line 27: rel_expression : simple_expression

arr[1.10]

Line 27: logic_expression : rel_expression

arr[1.10]

Line 27: expression : variable ASSIGNOP logic_expression

a=arr[1.10]

Line 27: expression_statement : expression SEMICOLON

a=arr[1.10];


Line 27: statement : expression_statement

a=arr[1.10];


Line 27: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];


Line 29: variable : ID

a

Line 29: factor : CONST_INT

10

Line 29: unary_expression : factor

10

Line 29: term : unary_expression

10

Line 29: simple_expression : term

10

Line 29: factor : CONST_INT

10

Line 29: unary_expression : factor

10

Line 29: term : unary_expression

10

Line 29: factor : CONST_INT

5

Line 29: unary_expression : factor

5

Line 29: term : term MULOP unary_expression

10%5

Line 29: simple_expression : term

10%5

Line 29: rel_expression : simple_expression

10%5

Line 29: logic_expression : rel_expression

10%5

Line 29: expression : logic_expression

10%5

Line 29: factor : LPAREN expression RPAREN

(10%5)

Line 29: unary_expression : factor

(10%5)

Line 29: term : unary_expression

(10%5)

Line 29: simple_expression : simple_expression ADDOP term

10+(10%5)

Line 29: rel_expression : simple_expression

10+(10%5)

Line 29: logic_expression : rel_expression

10+(10%5)

Line 29: expression : variable ASSIGNOP logic_expression

a=10+(10%5)

Line 29: expression_statement : expression SEMICOLON

a=10+(10%5);


Line 29: statement : expression_statement

a=10+(10%5);


Line 29: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);


Line 30: variable : ID

a

Line 30: factor : CONST_INT

10

Line 30: unary_expression : factor

10

Line 30: term : unary_expression

10

Line 30: simple_expression : term

10

Line 30: factor : CONST_INT

10

Line 30: unary_expression : factor

10

Line 30: term : unary_expression

10

Line 30: variable : ID

c

Line 30: factor : variable

c

Line 30: unary_expression : factor

c

Error at line 30: Non-Integer operand on modulus operator

Line 30: term : term MULOP unary_expression

10%c

Line 30: simple_expression : term

10%c

Line 30: rel_expression : simple_expression

10%c

Line 30: logic_expression : rel_expression

10%c

Line 30: expression : logic_expression

10%c

Line 30: factor : LPAREN expression RPAREN

(10%c)

Line 30: unary_expression : factor

(10%c)

Line 30: term : unary_expression

(10%c)

Line 30: simple_expression : simple_expression ADDOP term

10+(10%c)

Line 30: rel_expression : simple_expression

10+(10%c)

Line 30: logic_expression : rel_expression

10+(10%c)

Line 30: expression : variable ASSIGNOP logic_expression

a=10+(10%c)

Line 30: expression_statement : expression SEMICOLON

a=10+(10%c);


Line 30: statement : expression_statement

a=10+(10%c);


Line 30: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);


Line 32: variable : ID

a

Line 32: variable : ID

a

Line 32: factor : variable

a

Line 32: unary_expression : factor

a

Line 32: term : unary_expression

a

Line 32: simple_expression : term

a

Line 32: rel_expression : simple_expression

a

Line 32: logic_expression : rel_expression

a

Line 32: arguments : logic_expression

a

Line 32: variable : ID

c

Line 32: factor : variable

c

Line 32: unary_expression : factor

c

Line 32: term : unary_expression

c

Line 32: simple_expression : term

c

Line 32: rel_expression : simple_expression

c

Line 32: logic_expression : rel_expression

c

Line 32: arguments : arguments COMMA logic_expression

a,c

Line 32: variable : ID

b

Line 32: factor : variable

b

Line 32: unary_expression : factor

b

Line 32: term : unary_expression

b

Line 32: simple_expression : term

b

Line 32: rel_expression : simple_expression

b

Line 32: logic_expression : rel_expression

b

Line 32: arguments : arguments COMMA logic_expression

a,c,b

Line 32: argument_list : arguments

a,c,b

Line 32: factor : ID LPAREN argument_list RPAREN

func2(a,c,b)

Line 32: unary_expression : factor

func2(a,c,b)

Line 32: term : unary_expression

func2(a,c,b)

Line 32: simple_expression : term

func2(a,c,b)

Line 32: rel_expression : simple_expression

func2(a,c,b)

Line 32: logic_expression : rel_expression

func2(a,c,b)

Line 32: expression : variable ASSIGNOP logic_expression

a=func2(a,c,b)

Line 32: expression_statement : expression SEMICOLON

a=func2(a,c,b);


Line 32: statement : expression_statement

a=func2(a,c,b);


Line 32: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);


Line 33: variable : ID

a

Line 33: variable : ID

a

Line 33: factor : variable

a

Line 33: unary_expression : factor

a

Line 33: term : unary_expression

a

Line 33: simple_expression : term

a

Line 33: rel_expression : simple_expression

a

Line 33: logic_expression : rel_expression

a

Line 33: arguments : logic_expression

a

Line 33: variable : ID

c

Line 33: factor : variable

c

Line 33: unary_expression : factor

c

Line 33: term : unary_expression

c

Line 33: simple_expression : term

c

Line 33: rel_expression : simple_expression

c

Line 33: logic_expression : rel_expression

c

Line 33: arguments : arguments COMMA logic_expression

a,c

Line 33: argument_list : arguments

a,c

Error at line 33: Total number of arguments mismatch in function func2

Line 33: factor : ID LPAREN argument_list RPAREN

func2(a,c)

Line 33: unary_expression : factor

func2(a,c)

Line 33: term : unary_expression

func2(a,c)

Line 33: simple_expression : term

func2(a,c)

Line 33: rel_expression : simple_expression

func2(a,c)

Line 33: logic_expression : rel_expression

func2(a,c)

Line 33: expression : variable ASSIGNOP logic_expression

a=func2(a,c)

Line 33: expression_statement : expression SEMICOLON

a=func2(a,c);


Line 33: statement : expression_statement

a=func2(a,c);


Line 33: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);


Line 34: variable : ID

a

Line 34: variable : ID

a

Line 34: factor : variable

a

Line 34: unary_expression : factor

a

Line 34: term : unary_expression

a

Line 34: simple_expression : term

a

Line 34: rel_expression : simple_expression

a

Line 34: logic_expression : rel_expression

a

Line 34: arguments : logic_expression

a

Line 34: variable : ID

b

Line 34: factor : variable

b

Line 34: unary_expression : factor

b

Line 34: term : unary_expression

b

Line 34: simple_expression : term

b

Line 34: rel_expression : simple_expression

b

Line 34: logic_expression : rel_expression

b

Line 34: arguments : arguments COMMA logic_expression

a,b

Line 34: variable : ID

c

Line 34: factor : variable

c

Line 34: unary_expression : factor

c

Line 34: term : unary_expression

c

Line 34: simple_expression : term

c

Line 34: rel_expression : simple_expression

c

Line 34: logic_expression : rel_expression

c

Line 34: arguments : arguments COMMA logic_expression

a,b,c

Line 34: argument_list : arguments

a,b,c

Error at line 34: 3th argument mismatch in function func2

Line 34: factor : ID LPAREN argument_list RPAREN

func2(a,b,c)

Line 34: unary_expression : factor

func2(a,b,c)

Line 34: term : unary_expression

func2(a,b,c)

Line 34: simple_expression : term

func2(a,b,c)

Line 34: rel_expression : simple_expression

func2(a,b,c)

Line 34: logic_expression : rel_expression

func2(a,b,c)

Line 34: expression : variable ASSIGNOP logic_expression

a=func2(a,b,c)

Line 34: expression_statement : expression SEMICOLON

a=func2(a,b,c);


Line 34: statement : expression_statement

a=func2(a,b,c);


Line 34: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);


Line 36: argument_list : 



Line 36: factor : ID LPAREN argument_list RPAREN

func3()

Line 36: unary_expression : factor

func3()

Line 36: term : unary_expression

func3()

Line 36: simple_expression : term

func3()

Line 36: rel_expression : simple_expression

func3()

Line 36: logic_expression : rel_expression

func3()

Line 36: expression : logic_expression

func3()

Line 36: expression_statement : expression SEMICOLON

func3();


Line 36: statement : expression_statement

func3();


Line 36: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();


Line 37: variable : ID

a

Line 37: argument_list : 



Line 37: factor : ID LPAREN argument_list RPAREN

func3()

Line 37: unary_expression : factor

func3()

Line 37: term : unary_expression

func3()

Line 37: simple_expression : term

func3()

Line 37: rel_expression : simple_expression

func3()

Line 37: logic_expression : rel_expression

func3()

Error at line 37: Void function used in expression

Line 37: expression : variable ASSIGNOP logic_expression

a=func3()

Line 37: expression_statement : expression SEMICOLON

a=func3();


Line 37: statement : expression_statement

a=func3();


Line 37: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();


Line 40: variable : ID

a

Line 40: variable : ID

a

Line 40: factor : variable

a

Line 40: unary_expression : factor

a

Line 40: term : unary_expression

a

Line 40: simple_expression : term

a

Line 40: rel_expression : simple_expression

a

Line 40: variable : ID

b

Line 40: factor : variable

b

Line 40: unary_expression : factor

b

Line 40: term : unary_expression

b

Line 40: simple_expression : term

b

Line 40: rel_expression : simple_expression

b

Line 40: variable : ID

c

Line 40: factor : variable

c

Line 40: unary_expression : factor

c

Line 40: term : unary_expression

c

Line 40: simple_expression : term

c

Line 40: rel_expression : simple_expression

c

Line 40: logic_expression : rel_expression LOGICOP rel_expression

b&&c

Line 40: expression : logic_expression

b&&c

Line 40: factor : LPAREN expression RPAREN

(b&&c)

Line 40: unary_expression : factor

(b&&c)

Line 40: term : unary_expression

(b&&c)

Line 40: simple_expression : term

(b&&c)

Line 40: rel_expression : simple_expression

(b&&c)

Line 40: logic_expression : rel_expression LOGICOP rel_expression

a||(b&&c)

Line 40: expression : logic_expression

a||(b&&c)

Line 40: factor : LPAREN expression RPAREN

(a||(b&&c))

Line 40: unary_expression : factor

(a||(b&&c))

Line 40: term : unary_expression

(a||(b&&c))

Line 40: simple_expression : term

(a||(b&&c))

Line 40: rel_expression : simple_expression

(a||(b&&c))

Line 40: logic_expression : rel_expression

(a||(b&&c))

Line 40: expression : variable ASSIGNOP logic_expression

a=(a||(b&&c))

Line 40: expression_statement : expression SEMICOLON

a=(a||(b&&c));


Line 40: statement : expression_statement

a=(a||(b&&c));


Line 40: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));


Line 41: variable : ID

a

Line 41: variable : ID

a

Line 41: factor : variable

a

Line 41: unary_expression : factor

a

Line 41: term : unary_expression

a

Line 41: simple_expression : term

a

Line 41: rel_expression : simple_expression

a

Line 41: variable : ID

b

Line 41: factor : variable

b

Line 41: unary_expression : factor

b

Line 41: term : unary_expression

b

Line 41: simple_expression : term

b

Line 41: rel_expression : simple_expression

b

Line 41: argument_list : 



Line 41: factor : ID LPAREN argument_list RPAREN

func3()

Line 41: unary_expression : factor

func3()

Line 41: term : unary_expression

func3()

Line 41: simple_expression : term

func3()

Line 41: rel_expression : simple_expression

func3()

Error at line 41: Void function used in expression

Line 41: logic_expression : rel_expression LOGICOP rel_expression

b&&func3()

Line 41: expression : logic_expression

b&&func3()

Line 41: factor : LPAREN expression RPAREN

(b&&func3())

Line 41: unary_expression : factor

(b&&func3())

Line 41: term : unary_expression

(b&&func3())

Line 41: simple_expression : term

(b&&func3())

Line 41: rel_expression : simple_expression

(b&&func3())

Line 41: logic_expression : rel_expression LOGICOP rel_expression

a||(b&&func3())

Line 41: expression : logic_expression

a||(b&&func3())

Line 41: factor : LPAREN expression RPAREN

(a||(b&&func3()))

Line 41: unary_expression : factor

(a||(b&&func3()))

Line 41: term : unary_expression

(a||(b&&func3()))

Line 41: simple_expression : term

(a||(b&&func3()))

Line 41: rel_expression : simple_expression

(a||(b&&func3()))

Line 41: logic_expression : rel_expression

(a||(b&&func3()))

Line 41: expression : variable ASSIGNOP logic_expression

a=(a||(b&&func3()))

Line 41: expression_statement : expression SEMICOLON

a=(a||(b&&func3()));


Line 41: statement : expression_statement

a=(a||(b&&func3()));


Line 41: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));


Line 43: variable : ID

a

Line 43: variable : ID

a

Line 43: factor : variable

a

Line 43: unary_expression : factor

a

Line 43: term : unary_expression

a

Line 43: simple_expression : term

a

Line 43: variable : ID

c

Line 43: factor : variable

c

Line 43: unary_expression : factor

c

Line 43: term : unary_expression

c

Line 43: simple_expression : term

c

Line 43: rel_expression : simple_expression RELOP simple_expression

a<=c

Line 43: logic_expression : rel_expression

a<=c

Line 43: expression : logic_expression

a<=c

Line 43: factor : LPAREN expression RPAREN

(a<=c)

Line 43: unary_expression : factor

(a<=c)

Line 43: term : unary_expression

(a<=c)

Line 43: simple_expression : term

(a<=c)

Line 43: rel_expression : simple_expression

(a<=c)

Line 43: logic_expression : rel_expression

(a<=c)

Line 43: expression : variable ASSIGNOP logic_expression

a=(a<=c)

Line 43: expression_statement : expression SEMICOLON

a=(a<=c);


Line 43: statement : expression_statement

a=(a<=c);


Line 43: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);


Line 44: variable : ID

a

Line 44: variable : ID

a

Line 44: factor : variable

a

Line 44: unary_expression : factor

a

Line 44: term : unary_expression

a

Line 44: simple_expression : term

a

Line 44: argument_list : 



Line 44: factor : ID LPAREN argument_list RPAREN

func3()

Line 44: unary_expression : factor

func3()

Line 44: term : unary_expression

func3()

Line 44: simple_expression : term

func3()

Error at line 44: Void function used in expression

Line 44: rel_expression : simple_expression RELOP simple_expression

a==func3()

Line 44: logic_expression : rel_expression

a==func3()

Line 44: expression : logic_expression

a==func3()

Line 44: factor : LPAREN expression RPAREN

(a==func3())

Line 44: unary_expression : factor

(a==func3())

Line 44: term : unary_expression

(a==func3())

Line 44: simple_expression : term

(a==func3())

Line 44: rel_expression : simple_expression

(a==func3())

Line 44: logic_expression : rel_expression

(a==func3())

Line 44: expression : variable ASSIGNOP logic_expression

a=(a==func3())

Line 44: expression_statement : expression SEMICOLON

a=(a==func3());


Line 44: statement : expression_statement

a=(a==func3());


Line 44: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());


Error at line 47: Undeclared variable d

Line 47: variable : ID

d

Line 47: variable : ID

c

Line 47: factor : variable

c

Line 47: unary_expression : factor

c

Line 47: term : unary_expression

c

Line 47: simple_expression : term

c

Line 47: rel_expression : simple_expression

c

Line 47: logic_expression : rel_expression

c

Line 47: expression : variable ASSIGNOP logic_expression

d=c

Line 47: expression_statement : expression SEMICOLON

d=c;


Line 47: statement : expression_statement

d=c;


Line 47: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;


Line 48: type_specifier : INT

int 

Error at line 48: Multiple declaration of arr

Line 48: declaration_list : ID LTHIRD CONST_INT RTHIRD

arr[10]

Line 48: var_declaration : type_specifier declaration_list SEMICOLON

int arr[10];


Line 48: statement : var_declaration

int arr[10];


Line 48: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];


Line 51: factor : CONST_INT

10

Line 51: unary_expression : factor

10

Line 51: term : unary_expression

10

Line 51: simple_expression : term

10

Line 51: rel_expression : simple_expression

10

Line 51: logic_expression : rel_expression

10

Line 51: expression : logic_expression

10

Line 51: variable : ID LTHIRD expression RTHIRD

arr[10]

Line 51: variable : ID

a

Line 51: factor : variable

a

Line 51: unary_expression : factor

a

Line 51: term : unary_expression

a

Line 51: simple_expression : term

a

Line 51: rel_expression : simple_expression

a

Line 51: logic_expression : rel_expression

a

Line 51: expression : variable ASSIGNOP logic_expression

arr[10]=a

Line 51: expression_statement : expression SEMICOLON

arr[10]=a;


Line 51: statement : expression_statement

arr[10]=a;


Line 51: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;


Error at line 52: Type mismatch, arr is an array

Line 52: variable : ID

arr

Line 52: variable : ID

a

Line 52: factor : variable

a

Line 52: unary_expression : factor

a

Line 52: term : unary_expression

a

Line 52: simple_expression : term

a

Line 52: rel_expression : simple_expression

a

Line 52: logic_expression : rel_expression

a

Line 52: expression : variable ASSIGNOP logic_expression

arr=a

Line 52: expression_statement : expression SEMICOLON

arr=a;


Line 52: statement : expression_statement

arr=a;


Line 52: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;


Line 53: variable : ID

a

Line 53: factor : CONST_INT

10

Line 53: unary_expression : factor

10

Line 53: term : unary_expression

10

Line 53: simple_expression : term

10

Line 53: rel_expression : simple_expression

10

Line 53: logic_expression : rel_expression

10

Line 53: expression : logic_expression

10

Error at line 53: c not an array

Line 53: variable : ID LTHIRD expression RTHIRD

c[10]

Line 53: factor : variable

c[10]

Line 53: unary_expression : factor

c[10]

Line 53: term : unary_expression

c[10]

Line 53: simple_expression : term

c[10]

Line 53: rel_expression : simple_expression

c[10]

Line 53: logic_expression : rel_expression

c[10]

Line 53: expression : variable ASSIGNOP logic_expression

a=c[10]

Line 53: expression_statement : expression SEMICOLON

a=c[10];


Line 53: statement : expression_statement

a=c[10];


Line 53: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];


Line 56: variable : ID

a

Line 56: variable : ID

b

Line 56: factor : variable

b

Line 56: unary_expression : factor

b

Line 56: term : unary_expression

b

Line 56: simple_expression : term

b

Line 56: rel_expression : simple_expression

b

Line 56: logic_expression : rel_expression

b

Line 56: arguments : logic_expression

b

Line 56: argument_list : arguments

b

Error at line 56: Undefined function c

Line 56: factor : ID LPAREN argument_list RPAREN

c(b)

Line 56: unary_expression : factor

c(b)

Line 56: term : unary_expression

c(b)

Line 56: simple_expression : term

c(b)

Line 56: rel_expression : simple_expression

c(b)

Line 56: logic_expression : rel_expression

c(b)

Line 56: expression : variable ASSIGNOP logic_expression

a=c(b)

Line 56: expression_statement : expression SEMICOLON

a=c(b);


Line 56: statement : expression_statement

a=c(b);


Line 56: statements : statements statement

int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);


Line 57: compound_statement : LCURL statements RCURL

{
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}



ScopeTable # 1.4
 25 --> < arr : ID> 

ScopeTable # 1
 1 --> < main : ID> 
 7 --> < a : ID> 
 8 --> < b : ID> 
 9 --> < c : ID> 
 27 --> < func1 : ID> 
 28 --> < func2 : ID> 
 29 --> < func3 : ID> 

ScopeTable with id 1.4 removed
Line 57: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}



Line 57: unit : func_definition

int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}



Line 57: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}

int func2(int a,float b,int c){
return a;
}

void func3(){
int a;
}

int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}



Line 61: type_specifier : INT

int 

Line 61: type_specifier : INT

int 

Line 61: parameter_list : type_specifier ID

int a

Line 61: func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON

int func4(int a);


Line 61: unit : func_declaration

int func4(int a);


Line 61: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}

int func2(int a,float b,int c){
return a;
}

void func3(){
int a;
}

int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}

int func4(int a);


Line 63: type_specifier : INT

int 

Line 63: type_specifier : INT

int 

Line 63: parameter_list : type_specifier ID

int a

Error at line 63: Multiple declaration of func4

Line 63: func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON

int func4(int a);


Line 63: unit : func_declaration

int func4(int a);


Line 63: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}

int func2(int a,float b,int c){
return a;
}

void func3(){
int a;
}

int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}

int func4(int a);
int func4(int a);


Line 65: type_specifier : INT

int 

Line 65: type_specifier : INT

int 

Line 65: parameter_list : type_specifier ID

int a

Line 65: type_specifier : FLOAT

float 

Line 65: parameter_list : parameter_list COMMA type_specifier ID

int a,float b

Error at line 65: Total number of arguments mismatch with function declaration in function func4

Line 66: variable : ID

a

Line 66: factor : variable

a

Line 66: unary_expression : factor

a

Line 66: term : unary_expression

a

Line 66: simple_expression : term

a

Line 66: rel_expression : simple_expression

a

Line 66: logic_expression : rel_expression

a

Line 66: expression : logic_expression

a

Line 66: statement : RETURN expression SEMICOLON

return a;


Line 66: statements : statement

return a;


Line 67: compound_statement : LCURL statements RCURL

{
return a;
}



ScopeTable # 1.5
 7 --> < a : ID> 
 8 --> < b : ID> 

ScopeTable # 1
 0 --> < func4 : ID> 
 1 --> < main : ID> 
 7 --> < a : ID> 
 8 --> < b : ID> 
 9 --> < c : ID> 
 27 --> < func1 : ID> 
 28 --> < func2 : ID> 
 29 --> < func3 : ID> 

ScopeTable with id 1.5 removed
Line 67: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int func4(int a,float b){
return a;
}



Line 67: unit : func_definition

int func4(int a,float b){
return a;
}



Line 67: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}

int func2(int a,float b,int c){
return a;
}

void func3(){
int a;
}

int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}

int func4(int a);
int func4(int a);
int func4(int a,float b){
return a;
}



Line 69: type_specifier : FLOAT

float 

Line 69: type_specifier : INT

int 

Line 69: parameter_list : type_specifier ID

int c

Line 69: func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON

float func5(int c);


Line 69: unit : func_declaration

float func5(int c);


Line 69: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}

int func2(int a,float b,int c){
return a;
}

void func3(){
int a;
}

int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}

int func4(int a);
int func4(int a);
int func4(int a,float b){
return a;
}

float func5(int c);


Line 71: type_specifier : INT

int 

Line 71: type_specifier : INT

int 

Line 71: parameter_list : type_specifier ID

int c

Error at line 71: Return type mismatch with function declaration in function func5

Line 72: variable : ID

c

Line 72: factor : variable

c

Line 72: unary_expression : factor

c

Line 72: term : unary_expression

c

Line 72: simple_expression : term

c

Line 72: rel_expression : simple_expression

c

Line 72: logic_expression : rel_expression

c

Line 72: expression : logic_expression

c

Line 72: statement : RETURN expression SEMICOLON

return c;


Line 72: statements : statement

return c;


Line 73: compound_statement : LCURL statements RCURL

{
return c;
}



ScopeTable # 1.6
 9 --> < c : ID> 

ScopeTable # 1
 0 --> < func4 : ID> 
 1 --> < main : ID> < func5 : ID> 
 7 --> < a : ID> 
 8 --> < b : ID> 
 9 --> < c : ID> 
 27 --> < func1 : ID> 
 28 --> < func2 : ID> 
 29 --> < func3 : ID> 

ScopeTable with id 1.6 removed
Line 73: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int func5(int c){
return c;
}



Line 73: unit : func_definition

int func5(int c){
return c;
}



Line 73: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}

int func2(int a,float b,int c){
return a;
}

void func3(){
int a;
}

int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}

int func4(int a);
int func4(int a);
int func4(int a,float b){
return a;
}

float func5(int c);
int func5(int c){
return c;
}



Line 75: type_specifier : INT

int 

Line 75: type_specifier : INT

int 

Line 75: parameter_list : type_specifier ID

int a

Line 75: func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON

int func6(int a);


Line 75: unit : func_declaration

int func6(int a);


Line 75: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}

int func2(int a,float b,int c){
return a;
}

void func3(){
int a;
}

int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}

int func4(int a);
int func4(int a);
int func4(int a,float b){
return a;
}

float func5(int c);
int func5(int c){
return c;
}

int func6(int a);


Line 77: type_specifier : INT

int 

Line 77: type_specifier : INT

int 

Line 77: parameter_list : type_specifier ID

int a

Line 78: variable : ID

a

Line 78: factor : variable

a

Line 78: unary_expression : factor

a

Line 78: term : unary_expression

a

Line 78: simple_expression : term

a

Line 78: rel_expression : simple_expression

a

Line 78: logic_expression : rel_expression

a

Line 78: expression : logic_expression

a

Line 78: statement : RETURN expression SEMICOLON

return a;


Line 78: statements : statement

return a;


Line 79: compound_statement : LCURL statements RCURL

{
return a;
}



ScopeTable # 1.7
 7 --> < a : ID> 

ScopeTable # 1
 0 --> < func4 : ID> 
 1 --> < main : ID> < func5 : ID> 
 2 --> < func6 : ID> 
 7 --> < a : ID> 
 8 --> < b : ID> 
 9 --> < c : ID> 
 27 --> < func1 : ID> 
 28 --> < func2 : ID> 
 29 --> < func3 : ID> 

ScopeTable with id 1.7 removed
Line 79: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int func6(int a){
return a;
}



Line 79: unit : func_definition

int func6(int a){
return a;
}



Line 79: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}

int func2(int a,float b,int c){
return a;
}

void func3(){
int a;
}

int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}

int func4(int a);
int func4(int a);
int func4(int a,float b){
return a;
}

float func5(int c);
int func5(int c){
return c;
}

int func6(int a);
int func6(int a){
return a;
}



Line 81: type_specifier : INT

int 

Line 81: type_specifier : INT

int 

Line 81: parameter_list : type_specifier ID

int a

Error at line 81: Multiple declaration of func6

Line 82: variable : ID

a

Line 82: factor : variable

a

Line 82: unary_expression : factor

a

Line 82: term : unary_expression

a

Line 82: simple_expression : term

a

Line 82: rel_expression : simple_expression

a

Line 82: logic_expression : rel_expression

a

Line 82: expression : logic_expression

a

Line 82: statement : RETURN expression SEMICOLON

return a;


Line 82: statements : statement

return a;


Line 83: compound_statement : LCURL statements RCURL

{
return a;
}



ScopeTable # 1.8
 7 --> < a : ID> 

ScopeTable # 1
 0 --> < func4 : ID> 
 1 --> < main : ID> < func5 : ID> 
 2 --> < func6 : ID> 
 7 --> < a : ID> 
 8 --> < b : ID> 
 9 --> < c : ID> 
 27 --> < func1 : ID> 
 28 --> < func2 : ID> 
 29 --> < func3 : ID> 

ScopeTable with id 1.8 removed
Line 83: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int func6(int a){
return a;
}



Line 83: unit : func_definition

int func6(int a){
return a;
}



Line 83: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}

int func2(int a,float b,int c){
return a;
}

void func3(){
int a;
}

int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}

int func4(int a);
int func4(int a);
int func4(int a,float b){
return a;
}

float func5(int c);
int func5(int c){
return c;
}

int func6(int a);
int func6(int a){
return a;
}

int func6(int a){
return a;
}



Line 85: type_specifier : FLOAT

float 

Line 85: type_specifier : INT

int 

Line 85: parameter_list : type_specifier ID

int a

Line 85: func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON

float func7(int a);


Line 85: unit : func_declaration

float func7(int a);


Line 85: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}

int func2(int a,float b,int c){
return a;
}

void func3(){
int a;
}

int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}

int func4(int a);
int func4(int a);
int func4(int a,float b){
return a;
}

float func5(int c);
int func5(int c){
return c;
}

int func6(int a);
int func6(int a){
return a;
}

int func6(int a){
return a;
}

float func7(int a);


Line 87: type_specifier : FLOAT

float 

Line 87: type_specifier : INT

int 

Line 87: parameter_list : type_specifier ID

int c

Line 87: type_specifier : INT

int 

Line 87: parameter_list : parameter_list COMMA type_specifier ID

int c,int a

Error at line 87: Total number of arguments mismatch with function declaration in function func7

Line 88: variable : ID

c

Line 88: factor : variable

c

Line 88: unary_expression : factor

c

Line 88: term : unary_expression

c

Line 88: simple_expression : term

c

Line 88: rel_expression : simple_expression

c

Line 88: logic_expression : rel_expression

c

Line 88: expression : logic_expression

c

Line 88: statement : RETURN expression SEMICOLON

return c;


Line 88: statements : statement

return c;


Line 89: compound_statement : LCURL statements RCURL

{
return c;
}



ScopeTable # 1.9
 7 --> < a : ID> 
 9 --> < c : ID> 

ScopeTable # 1
 0 --> < func4 : ID> 
 1 --> < main : ID> < func5 : ID> 
 2 --> < func6 : ID> 
 3 --> < func7 : ID> 
 7 --> < a : ID> 
 8 --> < b : ID> 
 9 --> < c : ID> 
 27 --> < func1 : ID> 
 28 --> < func2 : ID> 
 29 --> < func3 : ID> 

ScopeTable with id 1.9 removed
Line 89: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

float func7(int c,int a){
return c;
}



Line 89: unit : func_definition

float func7(int c,int a){
return c;
}



Line 89: program : program unit

int a,b;
float c;
float func1(float a){
return a;
}

int func2(int a,float b,int c){
return a;
}

void func3(){
int a;
}

int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}

int func4(int a);
int func4(int a);
int func4(int a,float b){
return a;
}

float func5(int c);
int func5(int c){
return c;
}

int func6(int a);
int func6(int a){
return a;
}

int func6(int a){
return a;
}

float func7(int a);
float func7(int c,int a){
return c;
}



Line 90: start : program

int a,b;
float c;
float func1(float a){
return a;
}

int func2(int a,float b,int c){
return a;
}

void func3(){
int a;
}

int main(){
int arr[10];
a=10;
a=10.0;
c=10;
a=func1(c);
a=c;
c=c+func1(c)+a+b;
a=c+func1(c)+a+b;
a=arr[10];
a=arr[1.10];
a=10+(10%5);
a=10+(10%c);
a=func2(a,c,b);
a=func2(a,c);
a=func2(a,b,c);
func3();
a=func3();
a=(a||(b&&c));
a=(a||(b&&func3()));
a=(a<=c);
a=(a==func3());
d=c;
int arr[10];
arr[10]=a;
arr=a;
a=c[10];
a=c(b);
}

int func4(int a);
int func4(int a);
int func4(int a,float b){
return a;
}

float func5(int c);
int func5(int c){
return c;
}

int func6(int a);
int func6(int a){
return a;
}

int func6(int a){
return a;
}

float func7(int a);
float func7(int c,int a){
return c;
}



symbol table:
ScopeTable # 1
 0 --> < func4 : ID> 
 1 --> < main : ID> < func5 : ID> 
 2 --> < func6 : ID> 
 3 --> < func7 : ID> 
 7 --> < a : ID> 
 8 --> < b : ID> 
 9 --> < c : ID> 
 27 --> < func1 : ID> 
 28 --> < func2 : ID> 
 29 --> < func3 : ID> 

Total lines: 90
Total errors: 21
