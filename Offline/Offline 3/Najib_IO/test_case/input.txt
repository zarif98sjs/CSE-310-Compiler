int a, b; float c;

float func1(float a){
    return a;
}

int func2(int a, float b, int c){
    return a;
}

void func3(){
    int a;
}

int main(){
    int arr[10];

    a = 10; // type check : int = int
    a = 10.0; // type check : int = float   x
    c = 10; // type check and conversion : float = int
    a = func1(c); // type check func: int = float   x
    a = c; // type check var: int = float   x
    c = c + func1(c) + a + b; // type check left float = float
    a = c + func1(c) + a + b; // type check left int = float    x

    a = arr[10]; // type check : index of arr 
    a = arr[1.10]; // type check : index of arr  x

    a = 10 + (10 % 5); // type check : modulus op
    a = 10 + (10 % c); // type check : modulus op   x

    a = func2(a, c, b); // type check : func args
    a = func2(a, c); // type check : func args   x
    a = func2(a, b, c); // type check : func args   x

    func3();  // type check : void func
    a = func3(); // type check : void func  x


    a = (a || (b && c));  // type conversion : logicop
    a = (a || (b && func3()));  // type conversion : logicop    x

    a = (a <= c);  // type conversion : relop
    a = (a == func3());  // type conversion : relop    x
    

    d = c; // unique check : undeclared x
    int arr[10]; // unique check : multiple x

 
    arr[10] = a; // array check 
    arr = a; // array check : array no index    x
    a = c[10]; // array check : not array indexed   x


    a = c(b); // func check : not func  x 
}



int func4(int a);

int func4(int a); // func check : multiple  x

int func4(int a, float b){  // func check : inconsistent  x
    return a;
}

float func5(int c); 

int func5(int c){   // func check : inconsistent    x
    return c;
}

int func6(int a);

int func6(int a){   // func check
    return a;
}

int func6(int a){   // func check : multiple  x
    return a;
}

float func7(int a);

float func7(int c, int a){ // func check : inconsistent   x
    return c;
}
